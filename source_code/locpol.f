      SUBROUTINE LOCPOL(JFIELD,FLDNOW,SCLNOW,SLIMAG,FLDNXT,DTOL,
     &                  TLO,THI,XI,IDECAY,IPRINT,LCONT,RUNAME,
     &                  CONNAM,CONUNT,NOPEN,SREIN,SIMIN)
C  Copyright (C) 2020 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
      USE sizes, ONLY: MXLOC
      USE efvs

C  SUBROUTINE FOR CONVERGING ON RESONANCES USING SCATTERING LENGTHS.
C  DESCRIBED IN DETAIL IN arXiv:1708.04661 and arXiv:1912.00206.
C  FIRST WRITTEN BY MDF 2017, EXTENSIVELY MODIFIED AND UPDATED BY CRLS AND MDF TO 2019

C
C  ON ENTRY: JFIELD IS THE NUMBER OF THE CALCULATION
C            FLDNOW IS THE FIELD AT WHICH THE LATEST CALCULATION WAS PERFORMED
C            SCLNOW IS THE REAL PART OF THE SCATTERING LENGTH AT FLDNOW
C            SLIMAG IS THE IMAGINARY PART OF THE SCATTERING LENGTH AT FLDNOW
C            DTOL CONTROLS THE CONVERGENCE CRITERION
C            TLO AND THI CONTROL HOW CLOSE TO THE RESONANCE POINTS ARE
C            ALLOWED TO BE
C            IDECAY DETERMINES HOW INELASTIC DECAY IS TREATED
C            IDECAY=0  THE RESONANCE IS PURELY ELASTIC
C            IDECAY=1  WEAK BACKGROUND INELASTICITY
C            IDECAY=2  FULL TREATMENT OF AN INELASTIC RESONANCE
C            IDECAY=3  CHARACTERISE A BREIT-WIGNER SHAPE IN PHASE SHIFT
C            IDECAY=4  CHARACTERISE AN S-MATRIX ELEMENT'S CIRCLE IN THE COMPLEX PLANE
C            IPRINT IS OBVIOUS
C  ON EXIT:  FLDNXT IS THE NEXT FIELD AT WHICH A CALCULATION SHOULD BE PERFORMED
C            IF SEARCH IS TO STOP, LCONT IS SET TO FALSE.

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)

C  MXLOC IS SET IN MODULE SIZES
      DIMENSION FIELDS(MXLOC),SCLREG(MXLOC),SCLNRE(MXLOC),
     1          SCLNIM(MXLOC)

      LOGICAL LCONT
      CHARACTER(100) F104,F105,F109,C130,C140,C150,TDELTA,TABG,TGAMMA
      CHARACTER(100) CGAMMA,TSBG,TDIAM,TPARTG,TDBG
      CHARACTER(2)   C1,C2
      CHARACTER(42)  TSVNAM
      CHARACTER(10)  RUNAME
      CHARACTER(LEFVN) CONNAM
      CHARACTER(LEFVU) CONUNT
      INTEGER        POS1,POS2,POS3,POS5,POS6,POS7,POS8,POS9,POS10,POS11
      INTEGER        NOPEN,NNOPEN
      DOUBLE PRECISION, ALLOCATABLE:: SRE(:,:),SIM(:,:)
      DOUBLE PRECISION  SREIN(NOPEN,NOPEN),SIMIN(NOPEN,NOPEN)

      DIMENSION IFIELD(3)

      SAVE FIELDS,SCLREG,SCLNRE,SCLNIM,IMIN,IMID,IMAX,ABG,B0,DELTA,
     1     F104,F105,F109,C130,C140,C150,TDELTA,TABG,TGAMMA,TDBG,TSVNAM,
     2     TSBG,TDIAM,TPARTG,NNOPEN,SRE,SIM

      IF (JFIELD.GT.MXLOC) THEN
        WRITE(6,*) ' *** ARRAY LENGTHS IN LOCPOL NOT ADEQUATE. ',
     1             'INCREASE MXLOC IN MODULE SIZES'
        STOP
      ENDIF

      FIELDS(JFIELD)=FLDNOW
      SCLNRE(JFIELD)=SCLNOW
      SCLNIM(JFIELD)=SLIMAG

      LCONT=.TRUE.

C  INITIALISATION
      IF (JFIELD.EQ.1) THEN
        IMAX=1
        IMID=2
        IMIN=3
        IF (IPRINT.GE.7) WRITE(6,100) TLO,THI,XI
  100   FORMAT(/'  TLO = ',F8.4,'  THI = ',F8.4,'  XI = ',F8.4)
        IF (ABS(TLO).GT.ABS(THI)) THEN
          WRITE(6,*) ' *** WARNING - ALGORITHM ASSUMES ',
     1               '|TLO|<=|THI|'
        ENDIF
        IF (TLO*THI.EQ.0) THEN
          WRITE(6,*) ' *** WARNING - ALGORITHM ASSUMES ',
     1               'TLO AND THI TO BE NON-ZERO'
        ENDIF

C  TRACK NOPEN, AND STORE DIAGONAL S-MATRIX ELEMENTS
        NNOPEN=NOPEN
        IF (ALLOCATED(SRE)) DEALLOCATE(SRE,SIM)
        ALLOCATE(SRE(MXLOC,NOPEN),SIM(MXLOC,NOPEN))

        CALL BCKINI(IDECAY,IPRINT,RUNAME,CONNAM,CONUNT)
C  SET UP SOME STRINGS FOR NEAT FORMATTING
C
C  L1PAD AND L2PAD ENSURE THAT THE COLUMN TITLE FOR THE SCATTERING LENGTH
C  MATCHES UP WITH THE COLUMN ENTRIES
        LTITLE=LEN(TRIM(CONNAM))+LEN(TRIM(CONUNT))+1
        LENNUM=16 !WIDTH OF SV NUMBER (G16.9 BELOW)
        LENCOL=MAX(LTITLE,LENNUM)
        L1PAD=2 !MINIMUM SEPARATION BETWEEN COLUMNS
        L2PAD=2
        IF (LENCOL.GT.LTITLE) THEN
          L1PAD=L1PAD+LENCOL-LTITLE
        ELSE
          L2PAD=L2PAD+LENCOL-LENNUM
        ENDIF
        WRITE(C1,'(I2)') L1PAD
        WRITE(C2,'(I2)') L2PAD
        F104="(/'  DATA USED ARE:'/2X,'POINT',3X,A,'/',A,"//
     1       TRIM(C1)//"X,'COMPLEX SCATTERING LENGTH')"
        F105="(1P,(3X,SS,I3,4X,G16.9,"//TRIM(C2)//
     1       "X,E12.5,' ',SP,E12.5,' i '))"
        F109="(/'  DATA USED ARE:'/2X,'POINT',3X,A,'/',A,"//
     1       TRIM(C1)//"X,'S-MATRIX ELEMENT')"

C  C130 CONTAINS THE TEXT:
C       3-POINT POLE FORMULA ESTIMATES ________ CONNAM_RES
C  TDELTA CONTAINS THE TEXT:
C       ____________________________________________ DELTA
C  TABG CONTAINS THE TEXT:
C       _____________________________________________ A_BG
C  C140 CONTAINS THE TEXT:
C       GIVES ______ A_RES
C  C150 CONTAINS THE TEXT:
C       THIS IMPLIES ___ GAMMA_INEL (= -2*A_BG*DELTA/A_RES)
C  (WHERE THE UNDERSCORES ARE PADDING TO MAKE SURE THESE LINE UP)
        C130='3-POINT POLE FORMULA ESTIMATES'
        CGAMMA='GAMMA_INEL (= -2*A_BG*DELTA/A_RES)'
        LEN1=LEN(TRIM(C130))+LEN(TRIM(CONNAM))+LEN('_RES')
        C140='GIVES'
        LEN2=LEN('SCATTERING LENGTH FOR POINT')+4+LEN(TRIM(C140))+
     1       LEN('A_RES')
        C150='THIS IMPLIES'
        LEN3=LEN(TRIM(C150))+LEN(TRIM(CGAMMA))
        LENREQ=MAX(LEN1,LEN2,LEN3)+2
        POS1=LENREQ-LEN('_RES')-LEN(TRIM(CONNAM))
        C130(POS1:)=TRIM(CONNAM)//'_RES'
        POS2=LENREQ-LEN2+LEN(TRIM(C140))
        C140(POS2:)='A_RES'
        POS3=LENREQ-LEN(TRIM(CGAMMA))
        C150(POS3:)=TRIM(CGAMMA)

C  TDELTA AND TABG CONTAIN THE RELEVENT TEXT PADDED OUT WITH SPACES SO
C  THAT THEY END IN THE SAME PLACE AS THE STRINGS ABOVE
        POS5=LENREQ-LEN('DELTA')
        TDELTA=' '
        TDELTA(POS5:)='DELTA'
        POS6=LENREQ-LEN('A_BG')
        TABG=' '
        TABG(POS6:)='A_BG'

C  PADDED TEXT FOR B-W CONVERGENCE
        POS7=LENREQ-LEN('GAMMA')
        TGAMMA=' '
        TGAMMA(POS7:)='GAMMA'
        POS8=LENREQ-LEN('EPSUM_BG / PI')
        TDBG=' '
        TDBG(POS8:)='EPSUM_BG / PI'

C PADDED TEXT FOR S-MATRIX CONVERGENCE
        POS9=LENREQ-LEN('S_BG')
        TSBG=' '
        TSBG(POS9:)='S_BG'
        POS10=LENREQ-LEN('CIRCLE DIAMETER')
        TDIAM=' '
        TDIAM(POS10:)='CIRCLE DIAMETER'
        POS11=LENREQ-LEN('PARTIAL WIDTH')
        TPARTG=' '
        TPARTG(POS11:)='PARTIAL WIDTH'

C  TSVNAM IS OF THE SAME LENGTH AS THE STRING
C       DELTA (= -ALPHA_RES*GAMMA_INEL/2*ALPHA_BG)
C  SO THAT WHEN PRINTED ADJUSTR, IT ENDS IN THE SAME PLACE
        TSVNAM=TRIM(CONNAM)//'_RES'
      ENDIF
      CALL BCKGRD(FIELDS(JFIELD),SCLNRE(JFIELD),SCLNIM(JFIELD))
C  SECOND POINT
      IF (JFIELD.EQ.2) THEN
        FLDNXT=(FIELDS(1)+FIELDS(2))/2.D0
        IF (IDECAY.EQ.1) THEN
          ABG=(SCLNRE(1)+SCLNRE(2))/2.D0
          IF (IPRINT.GE.8) WRITE(6,101) ABG,RUNAME
  101     FORMAT('  AVERAGE OF FIRST TWO SCATTERING LENGTHS GIVES FIRST'
     1           ' APPROXIMATION OF A_BG = ',F12.5,1X,A)
        ENDIF
      ENDIF

      IF (NOPEN.NE.NNOPEN) THEN
        WRITE(6,*) " *** NOPEN CHANGED BETWEEN CALCULATIONS, STOPPING"
        STOP
      ENDIF
C STORE DIAGONAL S-MATRIX ELEMENTS
      DO I=1,NOPEN
        SRE(JFIELD,I)=SREIN(I,I)
        SIM(JFIELD,I)=SIMIN(I,I)
      ENDDO

      IF (JFIELD.LE.2) RETURN

C  MAIN PART OF ALGORITHM
C  ORDER POINTS BY FIELD ORDER
      IFIELD(1)=IMAX
      IFIELD(2)=IMIN
      IFIELD(3)=IMID
      DO I1=1,2
        DO I2=I1+1,3
          IF (FIELDS(IFIELD(I1)).GT.FIELDS(IFIELD(I2))) THEN
            IT=IFIELD(I1)
            IFIELD(I1)=IFIELD(I2)
            IFIELD(I2)=IT
          ENDIF
        ENDDO
      ENDDO
      I1=IFIELD(1)
      I2=IFIELD(2)
      I3=IFIELD(3)
      IF (IPRINT.GE.8) WRITE(6,161) I1,I2,I3
  161 FORMAT(/'  USING POINTS',
     1       2(1X,I3),' AND',1X,I3)

      IF (IDECAY.LT.2) THEN
C  PURE ELASTIC OR WEAKLY DECAYED RESONANCE

        IF (IDECAY.EQ.1) THEN
          DO I=1,3
            SCLREG(IFIELD(I))=SCLNRE(IFIELD(I))+SCLNIM(IFIELD(I))**2/
     1                        (SCLNRE(IFIELD(I))-ABG)
          ENDDO

          IF (IPRINT.GE.8)
     1      WRITE(6,102) ABG,TRIM(RUNAME),
     2                   (IFIELD(I),SCLNRE(IFIELD(I)),SCLNIM(IFIELD(I)),
     3                    SCLREG(IFIELD(I)),TRIM(RUNAME),I=1,3)
  102     FORMAT(/'  USING PREVIOUS VALUE OF A_BG = ',F12.7,1X,A,
     2           ' TO CALCULATE NEW "REGULARISED" SCATTERING LENGTHS',
     3           1P,3(/'  A_',SS,I2.2,' = ',E12.5,1X,SP,E12.5,' i ',
     4                ' GIVES   A_REGULARISED = ',E12.5,1X,A)/)
          CALL POLEQN(FIELDS(I1),SCLREG(I1),FIELDS(I2),SCLREG(I2),
     1                FIELDS(I3),SCLREG(I3),ABG,B0,DELTA)
        ELSE
          CALL POLEQN(FIELDS(I1),SCLNRE(I1),FIELDS(I2),SCLNRE(I2),
     1                FIELDS(I3),SCLNRE(I3),ABG,B0,DELTA)
        ENDIF

        IF (IPRINT.GE.6)
     1    WRITE(6,130) TRIM(C130),B0,TRIM(CONUNT),
     2                 TRIM(TDELTA),DELTA,TRIM(CONUNT),
     3                 TRIM(TABG),ABG,RUNAME
  130   FORMAT(/2X,A,' = ',1PG16.9,1X,A/
     1          2X,A,' = ',1PG12.5,5X,A/
     2          2X,A,' = ',1PG12.5,5X,A/)

      ELSEIF (IDECAY.EQ.2) THEN
C  STRONGLY DECAYED RESONANCE
        IF (IPRINT.GE.8) THEN
          WRITE(6,FMT=F104) TRIM(CONNAM),TRIM(CONUNT)
          WRITE(6,FMT=F105) (IFIELD(I),FIELDS(IFIELD(I)),
     1                       SCLNRE(IFIELD(I)),SCLNIM(IFIELD(I)),I=1,3)
        ENDIF

        CALL DECFIT(FIELDS(I1),SCLNRE(I1),-SCLNIM(I1),
     1              FIELDS(I2),SCLNRE(I2),-SCLNIM(I2),
     2              FIELDS(I3),SCLNRE(I3),-SCLNIM(I3),
     3              B0,ALPHBG,BETABG,ALPRES,BETRES,
     4              GAMIN)
        DELTA=-0.5D0*GAMIN*ALPRES/ALPHBG

        IF (IPRINT.GE.6)
     1    WRITE(6,106) ADJUSTR(TSVNAM),B0,TRIM(CONUNT),
     3                 TRIM(RUNAME),ALPHBG,-BETABG,
     4                 TRIM(RUNAME),ALPRES,-BETRES,
     5                 GAMIN,TRIM(CONUNT),
     6                 DELTA,TRIM(CONUNT)
  106     FORMAT(/'  PARAMETERS OBTAINED ARE:'/,
     1           2X,A,' = ',G16.9,1X,A/,
     2           29X,'A_BG  (IN ',A,') = ',1P G12.5,' ',SP,G12.5,' i '/
     3           29X,'A_RES (IN ',A,') = ',SS,G12.5,' ',SP,G12.5,' i '//
     4           34X,'GAMMA_INEL = ',SS,G12.5,X,A/,
     5           2X,'DELTA (= -ALPHA_RES*GAMMA_INEL/2*ALPHA_BG)',
     6           ' = ',G12.5,X,A)
        DELTAS=DELTA
        IF (ABS(GAMIN).GT.ABS(DELTA)) THEN
          IF (IPRINT.GE.7) WRITE(6,107)
  107     FORMAT('  USING GAMMA_INEL IN PLACE OF DELTA TO CONTROL'
     1           ' CONVERGENCE PROCEDURE'/)
          DELTA=GAMIN
        ELSE
          IF (IPRINT.GE.7) WRITE(6,108)
  108     FORMAT('  USING DELTA TO CONTROL CONVERGENCE PROCEDURE'/)
        ENDIF
      ELSEIF (IDECAY.EQ.3) THEN
C  BREIT-WIGNER
        CALL BWFIT(FIELDS(I1),SCLNRE(I1),
     1             FIELDS(I2),SCLNRE(I2),
     2             FIELDS(I3),SCLNRE(I3),
     3             B0,GAMMA,DBG)
        DELTA=GAMMA
        IF (IPRINT.GE.6)
     1    WRITE(6,130) TRIM(C130),B0,TRIM(CONUNT),
     2                 TRIM(TGAMMA),GAMMA,TRIM(CONUNT),
     3                 TRIM(TDBG),DBG
      ELSEIF (IDECAY.EQ.4) THEN
C  S-MATRIX ELEMENT
        IF (IPRINT.GE.8) THEN
          WRITE(6,FMT=F109) TRIM(CONNAM),TRIM(CONUNT)
          WRITE(6,FMT=F105) (IFIELD(I),FIELDS(IFIELD(I)),
     1                       SCLNRE(IFIELD(I)),SCLNIM(IFIELD(I)),I=1,3)
        ENDIF

        CALL DECFIT(FIELDS(I1),SCLNRE(I1),-SCLNIM(I1),
     1              FIELDS(I2),SCLNRE(I2),-SCLNIM(I2),
     2              FIELDS(I3),SCLNRE(I3),-SCLNIM(I3),
     3              B0,ALPHBG,BETABG,ALPRES,BETRES,
     4              GAMMA)
        SREBG=ALPHBG
        SIMBG=-BETABG
        DIAMRE=-BETRES
        DIAMIM=-ALPRES
        PARTG=SQRT(DIAMRE**2+DIAMIM**2)/2.0*GAMMA
        DELTA=GAMMA
        IF (IPRINT.GE.6)
     1    WRITE(6,111) TRIM(C130),B0,TRIM(CONUNT),
     2                 TRIM(TGAMMA),GAMMA,TRIM(CONUNT),
     3                 TRIM(TSBG),SREBG,SIMBG,
     4                 TRIM(TDIAM),DIAMRE,DIAMIM,
     4                 TRIM(TPARTG),PARTG,TRIM(CONUNT)
  111   FORMAT(2X,A,' = ',1PG16.9,1X,A,/
     1         2X,A,' = ',1PG12.5,5X,A,/
     2         2X,A,' = ',SS E12.5,' ',SP,E12.5,' i '/
     3         2X,A,' = ',SS E12.5,' ',SP,E12.5,' i '/
     4         2X,A,' = ',SS 1PG12.5,5X,A)
      ENDIF


C  LOGIC FOR CHOOSING NEXT POINT, DESCRIBED IN arXiv:1912.00206
C  FIRST, SORT 3 EXISTING POINTS
      DMIN=(FIELDS(IMIN)-B0)/ABS(DELTA)
      DMID=(FIELDS(IMID)-B0)/ABS(DELTA)
      DMAX=(FIELDS(IMAX)-B0)/ABS(DELTA)

      IF (ABS(DMAX).LT.ABS(DMID)) THEN
        TMP=IMAX
        IMAX=IMID
        IMID=TMP
        DMID=(FIELDS(IMID)-B0)/ABS(DELTA)
        DMAX=(FIELDS(IMAX)-B0)/ABS(DELTA)
      ENDIF
      IF (ABS(DMID).LT.ABS(DMIN)) THEN
        TMP=IMID
        IMID=IMIN
        IMIN=TMP
        DMID=(FIELDS(IMID)-B0)/ABS(DELTA)
        DMIN=(FIELDS(IMIN)-B0)/ABS(DELTA)
      ENDIF
      IF (ABS(DMAX).LT.ABS(DMID)) THEN
        TMP=IMAX
        IMAX=IMID
        IMID=TMP
        DMID=(FIELDS(IMID)-B0)/ABS(DELTA)
        DMAX=(FIELDS(IMAX)-B0)/ABS(DELTA)
      ENDIF

      IF (IDECAY.EQ.1) THEN
        BETA=-SCLNIM(IMIN)
        ALPHA=SCLNRE(IMIN)
        ARES=BETA+(ALPHA-ABG)**2/BETA
        GAMIN=-2.D0*ABG*DELTA/ARES
        IF (IPRINT.GE.8) WRITE(6,170) IMIN,TRIM(C140),ARES,RUNAME,
     1                                TRIM(C150),GAMIN,TRIM(CONUNT)
  170   FORMAT('  SCATTERING LENGTH FOR POINT ',I2,1X,A,' = ',
     1         1PG12.5,1X,A/2X,A,' = ',G12.5,1X,A/)
      ENDIF
      IF (IPRINT.GE.8) WRITE(6,160) DMAX,DMID,DMIN
  160 FORMAT('  DISTANCES FROM RESONANCE SCALED BY |DELTA|:',
     1       1P,3(1X,G10.3)/)
      SPRED=ABS(FIELDS(I1)-FIELDS(I3))
      IF (ABS(B0-FIELDS(IMIN)).GT.10.D0*SPRED.AND.JFIELD.GE.4) THEN
        WRITE(6,120) TRIM(CONNAM)
  120   FORMAT('  PREDICTED STEP MORE THAN 10 TIMES ',A,' RANGE'/
     1       '  PROBABLY OSCILLATING SO ABANDON CONVERGENCE')
        LCONT=.FALSE.
        RETURN
      ENDIF
      IF (IDECAY.EQ.0) THEN
C  IF IDECAY=1, CHECK THE RESONANCE ISN'T ACTUALLY DECAYING.
C  USES THE DIFFERENCE BETWEEN THE REAL AND REGULARISED SCATTERING
C  LENGTHS.
        DIFF=SCLNIM(IMIN)**2/(SCLNRE(IMIN)-ABG)
C  THESE CRITERIA HASVEN'T BEEN TESTED, JUST A FIRST GUESS AT THIS STAGE.
        IF (DIFF.GT.MAX(0.1D0*ABS(SCLNRE(IMIN)),1.0D0)) THEN
          WRITE(6,125) DIFF
  125     FORMAT('  PREDICTED CORRECTION DUE TO IMAGINARY PART OF '
     1           'SCATTERING LENGTH IS ',1PG12.5,'. TERMINATING '
     2           'CONVERGENCE.'/
     3           '  RESONANCE IS PROBABLY ACTUALLY DECAYING AND SHOULD '
     4           'BE CHARACTERISED USING IFCONV = 2 OR 3')
          LCONT=.FALSE.
          RETURN
        ENDIF
      ENDIF

C  NOW WE HAVE 3 SORTED POINTS AND THEIR DISTANCES FROM THE RESONANCE.
C
C  DECIDE WHETHER TO CONTINUE, AND IF SO, WHICH POINT TO DISCARD.
C
C  WE ARE AIMING FOR:
C     1 POINT CLOSE TO THI*|DELTA|
C     1 POINT CLOSE TO TLO*|DELTA|
C     AND 1 POINT AS CLOSE TO THE RESONANCE AS POSSIBLE.
C  LOGIC HERE SHOULD BE CLEAR FROM THE WRITE STATEMENTS
      IF (ABS(DMAX).GE.ABS(2*THI)) THEN
        IF (IPRINT.GE.7) WRITE(6,300)
  300   FORMAT('  MOVING POINT FURTHEST FROM THE RESONANCE BECAUSE IT',
     1         ' IS STILL FAR FROM THE RESONANCE')
        IF (ABS(DMIN).GE.ABS((1-XI)*TLO)) THEN
          IF (IPRINT.GE.7) WRITE(6,310)
  310     FORMAT('  PLACING NEW POINT AT PREDICTED RESONANCE POSITION')
          IMAX=IMID
          IMID=IMIN
          IMIN=JFIELD+1
          FLDNXT=B0
        ELSEIF (ABS(DMID).GE.ABS((1-XI)*THI).OR.DMID*TLO.LT.0) THEN
          IF (IPRINT.GE.7) WRITE(6,320) 'TLO'
  320     FORMAT('  PLACING NEW POINT AT ',A,
     1           '*|DELTA| FROM RESONANCE')
          IMAX=IMID
          IMID=JFIELD+1
          FLDNXT=B0+TLO*ABS(DELTA)
        ELSE
          IF (IPRINT.GE.7) WRITE(6,320) 'THI'
          IMAX=JFIELD+1
          FLDNXT=B0+THI*ABS(DELTA)
        ENDIF
      ELSE
        EMAX=ABS((DMAX-THI)/(XI*THI))
        EMID=ABS((DMID-TLO)/(XI*TLO))
        EMIN=ABS(DMIN*DELTA/DTOL)
        IF (IPRINT.GE.7) WRITE(6,200)
        IF (IPRINT.GE.8) WRITE(6,210) EMAX,EMID,EMIN
  200 FORMAT('  3 POINTS IN THE VICINITY OF THE RESONANCE')
  210 FORMAT('  DISTANCES FROM DESIRED POINT PLACEMENTS SCALED BY'
     1       ' TOLERANCES:',
     1       1P,3(1X,G10.3)/)
        IF (EMAX.LT.1.D0.AND.EMID.LT.1.D0.AND.EMIN.LT.1.D0) THEN
C CONVERGED
          LCONT=.FALSE.
          IF (IPRINT.GE.2)
     1      WRITE(6,150) TRIM(CONNAM),
     2                   B0,TRIM(CONUNT),
     3                   B0-FIELDS(IMIN),TRIM(CONUNT)
  150       FORMAT(/'  CONVERGED ON RESONANCE AT ',A,'_RES = ',
     1             1PG16.9,1X,A,', WITH PREDICTED STEP = ',G12.5,1X,A)
          IF (IPRINT.GE.3 .AND. IPRINT.LE.5) THEN
            IF (IDECAY.LT.2) THEN
              WRITE(6,130) TRIM(C130),B0,TRIM(CONUNT),
     1                     TRIM(TDELTA),DELTA,TRIM(CONUNT),
     2                     TRIM(TABG),ABG,RUNAME
            ELSEIF (IDECAY.EQ.2) THEN
              WRITE(6,106) ADJUSTR(TSVNAM),B0,TRIM(CONUNT),
     1                     TRIM(RUNAME),ALPHBG,-BETABG,
     2                     TRIM(RUNAME),ALPRES,-BETRES,
     3                     GAMIN,TRIM(CONUNT),
     4                     DELTAS,TRIM(CONUNT)
            ELSEIF (IDECAY.EQ.3) THEN
              WRITE(6,130) TRIM(C130),B0,TRIM(CONUNT),
     1                     TRIM(TGAMMA),GAMMA,TRIM(CONUNT),
     2                     TRIM(TDBG),DBG
            ELSEIF (IDECAY.EQ.4) THEN
              WRITE(6,111) TRIM(C130),B0,TRIM(CONUNT),
     1                     TRIM(TGAMMA),GAMMA,TRIM(CONUNT),
     2                     TRIM(TSBG),SREBG,SIMBG,
     3                     TRIM(TDIAM),DIAMRE,DIAMIM,
     4                     TRIM(TPARTG),PARTG,TRIM(CONUNT)
            ENDIF
          ENDIF
          IF ((IDECAY.EQ.3 .OR. IDECAY.EQ.4) .AND. NNOPEN.GT.1) THEN
            IF (IPRINT.GE.5) THEN
              WRITE(6,*)
              WRITE(6,*) ' PARTIAL WIDTHS OBTAINED FROM TWO OF THE',
     1                   ' S MATRICES USED IN THE FINAL ITERATION'
              WRITE(6,151) TRIM(CONNAM),B0,TRIM(CONUNT),GAMMA,
     1                     TRIM(CONUNT)
              WRITE(6,152) TRIM(CONUNT)
            ENDIF
            DO I=1,NOPEN
              CALL FIT2PT(FIELDS(IMIN),SRE(IMIN,I),SIM(IMIN,I),
     1                    FIELDS(IMAX),SRE(IMAX,I),SIM(IMAX,I),
C    1                    FIELDS(IMID),SRE(IMID,I),SIM(IMID,I),
     2                    B0,GAMMA,SREBG,SIMBG,DIAMRE,DIAMIM)
              PARTG=SQRT(DIAMRE**2+DIAMIM**2)/2.0*GAMMA
              IF (IPRINT.GE.5)
     1          WRITE(6,153) I,SREBG,SIMBG,DIAMRE,DIAMIM,
     2                       PARTG
            ENDDO
  151 FORMAT('  KEEPING ',A,'_RES = ',
     1            1PG16.9,1X,A,' AND GAMMA = ',G12.5,1X,A," FIXED")
  152 FORMAT('  ','  I',X,' S_BG',24X,
     1       ' DIAMETER',20X,' GAMMA_I / ',A)
  153 FORMAT(SS '  ',I3,X,E12.5,X,SP,E12.5,
     1       ' i ',X,SS E12.5,X,SP,E12.5,' i ',X,SS 1PG12.5)
          ENDIF
C THIS CODE WOULD CALCULATE PARTIAL WIDTHS USING THE 3-POINT FORMULA, WITH B_RES AND GAMMA FREE TO VARY
C             WRITE(6,*)
C             WRITE(6,*) ' PARTIAL WIDTHS OBTAINED FROM THREE OF THE',
C    1                   ' S MATRICES USED IN THE FINAL ITERATION'
C             WRITE(6,154) TRIM(CONNAM) // "_RES / " // TRIM(CONUNT),
C     1                    TRIM(CONUNT), TRIM(CONUNT)
C             DO I=1,NOPEN
C              CALL DECFIT(FIELDS(I1),SRE(I1,I),-SIM(I1,I),
C     1                    FIELDS(I2),SRE(I2,I),-SIM(I2,I),
C     2                    FIELDS(I3),SRE(I3,I),-SIM(I3,I),
C     3                    B0,ALPHBG,BETABG,ALPRES,BETRES,
C     4                    GAMMA)
C              SREBG=ALPHBG
C              SIMBG=-BETABG
C              DIAMRE=-BETRES
C              DIAMIM=-ALPRES
C              PARTG=SQRT(DIAMRE**2+DIAMIM**2)/2.0*GAMMA
C              WRITE(6,155) I,B0,GAMMA,SREBG,SIMBG,DIAMRE,DIAMIM,
C     1                     PARTG
C             ENDDO
C  154 FORMAT('  ','I  ',X,A16  ,X,'GAMMA / ',A8,X,'S_BG',32X,X,
C     1       'DIAMETER',28X,' GAMMA_I / ',A)
C  155 FORMAT(SS '  ',I3,X,1PG16.9,X,1PG16.9,X,1PG16.9,' ',SP,G16.9,
C     1       ' i ',X,SS 1PG16.9,' ',SP,G16.9,' i ',X,SS 1PG16.9)
        ELSE
C NOT CONVERGED
          IF (EMIN.GE.EMID.AND.EMIN.GE.EMAX) THEN
C MIN POINT FURTHEST FROM CONVERGED
            IF (IPRINT.GE.7) WRITE(6,240)
            IMIN=JFIELD+1
            FLDNXT=B0
          ELSEIF (EMID.GE.EMAX) THEN
C MID POINT FURTHEST FROM CONVERGED
            IF (IPRINT.GE.7) WRITE(6,230)
            IMID=JFIELD+1
            FLDNXT=B0+TLO*ABS(DELTA)
          ELSE
C MAX POINT FURTHEST FROM CONVERGED
            IF (IPRINT.GE.7) WRITE(6,220)
            IMAX=JFIELD+1
            FLDNXT=B0+THI*ABS(DELTA)
          ENDIF

  220 FORMAT('  MOVING POINT FURTHEST FROM THE RESONANCE AND',
     1         ' PLACING NEW POINT AT THI*|DELTA| FROM RESONANCE')
  230 FORMAT('  MOVING INTERMEDIATE POINT AND',
     1         ' PLACING NEW POINT AT TLO*|DELTA| FROM RESONANCE')
  240 FORMAT('  MOVING POINT CLOSEST TO THE RESONANCE AND',
     1         ' PLACING NEW POINT AT THE PREDICTED RESONANCE POSITION')
        ENDIF
      ENDIF
      RETURN

      END SUBROUTINE
C --------------------------------------------------------------- END OF LOCPOL
      SUBROUTINE POLEQN(B1,A1,B2,A2,B3,A3,ABG,B0,DELTA)
C  Copyright (C) 2019 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  SUBROUTINE TO LOCATE A SIMPLE POLE FROM 3 NEARBY POINTS
C  AND RETURN ABG, B0 AND DELTA WHERE
C     A(B) = ABG [ 1 - DELTA / (B-B0) ]
C
C  ON ENTRY: A1, A2 AND A3 ARE THE SCATTERING LENGTHS AT FIELDS B1, B2
C            AND B3 - ALL UNCHANGED ON EXIT.
C  ON EXIT:  ABG, B0 AND DELTA ARE AS DESCRIBED ABOVE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      RATIO=(B3-B1)/(B2-B1)*(A2-A1)/(A3-A1)
      B0=(B3-B2*RATIO)/(1.D0-RATIO)
      ABGDEL=(B3-B0)*(B1-B0)*(A3-A1)/(B3-B1)
      ABG=A1+ABGDEL/(B1-B0)
      DELTA=ABGDEL/ABG

      RETURN
      END
C
C --------------------------------------------------------------- END OF POLEQN
C
      SUBROUTINE DECFIT(B1,ALPHA1,BETA1,
     1                  B2,ALPHA2,BETA2,
     2                  B3,ALPHA3,BETA3,
     3                  BRES,ALPHBG,BETABG,ALPRES,BETRES,
     4                  GAMIN)
C  Copyright (C) 2020 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  SUBROUTINE TO FIT THREE CALCULATED SCATTERING LENGTHS TO THE EQUATION
C  FOR A DECAYED RESONANCE (NJP 9, 152) AND RETURN THE FITTED PARAMETERS.
C  METHOD DESCRIBED IN (arXiv:1708.04661)
C  WRITTEN BY MDF 2017
C
C  ON ENTRY: B1 IS THE FIELD AT WHICH THE CALCULATED SCATTERING LENGTH
C               IS A1 = ALPHA1 - i * BETA1. SIMILARLY FOR 2 AND 3.
C
C  ON EXIT: BRES IS THE RESONANCE POSITION,
C           ALPHBG AND BETABG ARE THE REAL AND IMAGINARY PARTS OF THE
C           BACKGROUND SCATTERING LENGTH,
C           ALPRES AND BETRES ARE THE REAL AND IMAGINARY PARTS OF
C           THE RESONANT SCATTERING LENGTH,
C           GAMIN IS THE INELASTIC WIDTH CHARATERISING THE
C           RESONANCE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE COMPLEX A1,A2,A3,AC,A1REL,A2REL,A3REL,ABGREL,ABG,ARES
      PI=2.D0*DACOS(0.D0)
      A1=DCMPLX(ALPHA1,-BETA1)
      A2=DCMPLX(ALPHA2,-BETA2)
      A3=DCMPLX(ALPHA3,-BETA3)

C  FIRST, FIND CENTRE OF CIRCLE DEFINED BY 3 POINTS. FOLLOWING EQNS COME
C  FROM SOLVING THE RELEVANT SIMULTANEOUS EQUATIONS.
      A=2.D0*(ALPHA2-ALPHA1)
      B=2.D0*(BETA2-BETA1)
      C=2.D0*(ALPHA3-ALPHA2)
      D=2.D0*(BETA3-BETA2)
      E=ABS(A2)**2-ABS(A1)**2
      F=ABS(A3)**2-ABS(A2)**2
      DET=A*D-B*C
      ALPHAC=(E*D-B*F)/DET
      BETAC=(A*F-C*E)/DET
      AC=DCMPLX(ALPHAC,-BETAC)
      A1REL=A1-AC
      A2REL=A2-AC
      A3REL=A3-AC
      R=ABS(A1REL)

C  NOW CONVERT 3 POINT ON CIRCLE TO ANGLES (FOLLOWING BREIT-WIGNER
C  FUNCTION), THEN ONTO PSEUDO SCATTERING LENGTHS (FOLLOWING SIMPLE POLE).
C  POTENTIAL TO INCLUDE AN ARBITRARY OFFSET ANGLE HERE, BUT I THINK IT
C  WILL BE RARELY NEEDED, IF EVER.
      THETA1=ATAN2(DIMAG(A1REL),DBLE(A1REL))
      THETA2=ATAN2(DIMAG(A2REL),DBLE(A2REL))
      THETA3=ATAN2(DIMAG(A3REL),DBLE(A3REL))
      PSA1=TAN(THETA1/2.D0)
      PSA2=TAN(THETA2/2.D0)
      PSA3=TAN(THETA3/2.D0)

C  SOLVE FOR THE PSEUDO RESONANCE PARAMETERS
      CALL POLEQN(B1,PSA1,B2,PSA2,B3,PSA3,PSABG,
     1            PSBRES,PSDEL)

C  CONVERT BACKGROUND BACK TO ANGLE, AND INTO TRUE ABG AND ARES.
      THBG=2.D0*ATAN(PSABG)
      ABGREL=R*EXP(THBG*DCMPLX(0.0,1.0))
      ABG=AC+ABGREL
      ARES=-2.D0*ABGREL*DCMPLX(0.0,1.0)

C  GET THETA OF RESONANCE POSITION, CONVERT BACK TO PSEUDO SCATTERING LENGTH
C  AND SOLVE FOR BRES
      THRES=THBG+PI
      PSRESA=TAN(THRES/2.D0)
      BRES=PSBRES-PSABG*PSDEL/
     1                  (PSRESA-PSABG)

C  FINALLY, SUBSTITUTE EVERYTHING INTO FULL EQUATION FOR A AND SOLVE FOR
C  GAMIN
      GAMIN=2.D0*(B1-BRES)/(ARES/(A1-ABG)-DCMPLX(0.0,1.0))
      ALPHBG=DBLE(ABG)
      BETABG=-DIMAG(ABG)
      ALPRES=DBLE(ARES)
      BETRES=-DIMAG(ARES)

      RETURN
      END SUBROUTINE
C
C --------------------------------------------------------------- END OF DECFIT
C
      SUBROUTINE BWFIT(B1,EP1,
     1                 B2,EP2,
     2                 B3,EP3,
     3                 BRES,GAM,DBG)
C  Copyright (C) 2020 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  SUBROUTINE TO FIT THREE CALCULATED EIGENPHASE SUMS TO THE
C  BRIET-WIGNER RESONANCE EQUATION, AND RETURN THE FITTED PARAMETERS.
C  METHOD DESCRIBED IN (arXiv:1912.00206)
C  WRITTEN BY MDF 2019
C
C  ON ENTRY: B1 IS THE FIELD AT WHICH THE CALCULATED EIGENPHASE SUM
C               IS EP1. SIMILARLY FOR 2 AND 3.
C
C  ON EXIT: BRES IS THE RESONANCE POSITION,
C           DBG IS THE BACKGROUND EIGENPHASE SUM
C           GAM IS THE BRIET-WIGNER WIDTH CHARATERISING THE RESONANCE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PI=2.D0*DACOS(0.D0)
C  CONVERT 3 EPSUMS PSEUDO SCATTERING LENGTHS (FOLLOWING SIMPLE POLE).
C  POTENTIAL TO INCLUDE AN ARBITRARY OFFSET ANGLE HERE, BUT I THINK IT
C  WILL BE RARELY NEEDED, IF EVER.
      THETA1=EP1*2*PI
      THETA2=EP2*2*PI
      THETA3=EP3*2*PI
      PSA1=TAN(THETA1/2.D0)
      PSA2=TAN(THETA2/2.D0)
      PSA3=TAN(THETA3/2.D0)
C  SOLVE FOR THE PSEUDO RESONANCE PARAMETERS
      CALL POLEQN(B1,PSA1,B2,PSA2,B3,PSA3,PSABG,
     1            PSBRES,PSDEL)

C  CONVERT BACKGROUND BACK TO ANGLE, AND INTO TRUE ABG AND ARES.
      THBG=2.D0*ATAN(PSABG)
      DBG=THBG/(2*PI)

C  GET THETA OF RESONANCE POSITION, CONVERT BACK TO PSEUDO SCATTERING LENGTH
C  AND SOLVE FOR BRES
      THRES=THBG+PI
      PSRESA=TAN(THRES/2.D0)
      BRES=PSBRES-PSABG*PSDEL/
     1                  (PSRESA-PSABG)

C SUBSTITITE BACK INTO BW FORMULA TO GET GAMMA
      GAM=2*TAN(THETA1/2.0-THBG/2.0)*(BRES-B1)
      DBG=DBG
      RETURN
      END SUBROUTINE
C
C --------------------------------------------------------------- END OF BWFIT
C
      SUBROUTINE FIT2PT(B1,SR1,SI1,
     1                  B2,SR2,SI2,
     2                  BRES,GAM,SRBG,SIBG,DIAMRE,DIAMIM)
C  Copyright (C) 2020 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  SUBROUTINE TO FIT THREE CALCULATED EIGENPHASE SUMS TO THE
C  BRIET-WIGNER RESONANCE EQUATION, AND RETURN THE FITTED PARAMETERS.
C  METHOD DESCRIBED IN (arXiv:1912.00206)
C  WRITTEN BY MDF 2019
C
C  ON ENTRY: B1 IS THE FIELD AT WHICH THE CALCULATED S-MATRIX ELEMENT
C               IS SR1 + i * SI1. SIMILARLY FOR 2.
C            BRES IS THE RESONANCE POSITION, KEPT FIXED
C            GAM IS THE TOTAL RESONANCE WIDTH, KEPT FIXED
C
C  ON EXIT: SRBG AND SIBG ARE THE REAL AND IMAGINARY PARTS OF THE S-MATRIX ELEMENT FAR FROM RESONANCE
C           DIAMRE AND DIAMIM ARE THE REAL AND IMAGINARY PARTS OF THE DIAMETER OF THE CIRCLE IN THE COMPLEX
C                         PLANE DESCRIBED BY THE S-MARTIX ELEMENT ACROSS THE RESONANCE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      X1=2.D0*(B1-BRES)/GAM
      X2=2.D0*(B2-BRES)/GAM
      SRBG=(SR1*X1-SI1-SR2*x2+SI2)/(X1-X2)
      SIBG=(SI1*X1+SR1-SI2*x2-SR2)/(X1-X2)
      DIAMRE=(SI1-SIBG)*X1+SR1-SRBG
      DIAMIM=(SRBG-SR1)*X1+SI1-SIBG
      RETURN
      END SUBROUTINE
