      INTEGER FUNCTION LDRWGH(ILDSVU, LWRITE, LABEL, ITYPE, NLEV,
     *                        NLEVEL, NQN, NNRG, URED, IPROGM)
C  This subroutine is part of the MOLSCAT, BOUND and FIELD suite of programs
C
C  WRITTEN 3 OCT 2012 G. MCBANE
C
C  SET OF FUNCTIONS FOR READING AND WRITING ILDSVU FILES, WHICH SAVE
C  THE LOG-DERIVATIVE MATRIX (OR OTHER NXN MATRICES) FOR LATER
C  PROCESSING.  MODELLED ON ISAVEU FILES, BUT WITH SOME DIFFERENCES
C  EITHER TO MAKE MORE SUITABLE FOR LOG DERIVATIVE MATRICES OR TO
C  EASE PROGRAMMING (ESPECIALLY MEMORY ALLOCATION.)

C  MODIFIED 6 NOV 2012 GC McBane TO ADD "DUMMY" READS.
C  MODIFIED 7 JAN 2013 TO STORE ERED AND EP2RU AS PART OF
C  PROPAGATION HEADER DURING CALL TO LDRWPH.  THIS INTRODUCES
C  AN INCOMPATIBILITY WITH FILES WRITTEN BEFORE THAT DATE; CODE TO
C  RESTORE THE OLD BEHAVIOR (INCLUDING CALLING SEQUENCE) IS LEFT IN
C  LDRWPH BUT COMMENTED OUT.

C  I SHOULD PROBABLY GENERALIZE THESE ROUTINES TO ALLOW STORAGE OF
C  EITHER FULL OR THE LOWER TRIANGULAR PARTS OF AN NXN MATRIX,
C  AND TO ALLOW EITHER REAL-ONLY OR REAL-AND-IMAGINARY PARTS.
C  THEN THEY WOULD BE USEFUL FOR STORING MANY DIFFERENT SORTS OF
C  MATRICES FOR LATER PROCESSING.  I HAVE NOT DONE THAT YET.
C  AT PRESENT THEY STORE ONE FULL NXN MATRIX AT A TIME.

C  ON ENTRY: ILDSVU IS THE FILE UNIT.  ABS(ILDSVU) MUST CORRESPOND TO A
C            FILE THAT IS ALREADY OPEN FOR UNFORMATTED SEQUENTIAL TRANSFERS;
C            LWRITE IS A LOGICAL VARIABLE. IT IS .TRUE. FOR WRITING AND
C                                                .FALSE. FOR READING.

C  IN SOME SITUATIONS IT WILL BE USEFUL TO "SKIP OVER" SECTIONS OF A FILE
C  DURING READ OPERATIONS.  TO REQUEST THAT SOME COMPONENT OF THE FILE BE
C  SKIPPED, WITHOUT MODIFYING THE FUNCTION ARGUMENTS, PASS A NEGATIVE ILDSVU
C  ON A CALL WITH LWRITE=.FALSE..  THE APPROPRIATE NUMBER OF RECORDS WILL
C  THEN BE READ AND DISCARDED FROM UNIT ABS(ILDSVU).

C  WRITES ALWAYS EITHER HALT OR RETURN 0, SO THERE IS NO NEED TO CHECK
C  THE RETURN VALUE FROM WRITE CALLS.

C  READS RETURN 0 FOR SUCCESS, <0 FOR END OF FILE.  AS A SPECIAL
C  CASE, LDRWMD (READ/WRITE MATRIX DATA) WILL RETURN +1 ON READS IF
C  MORE DATA ARE PRESENT IN THE FILE BUT THE NEXT RECORD APPEARS
C  TO BE A MATRIX HEADER FOR A NEW PROPAGATION RATHER THAN A NEW
C  MATRIX FROM THE SAME PROPAGATION.

C  A COMPLETE ILDSVU FILE WOULD NORMALLY BE READ OR WRITTEN BY THE SEQUENCE
C  LDRWGH   (READ/WRITE GLOBAL HEADER)
C  LDRWGV   (READ/WRITE GLOBAL VECTORS)
C  DO I = 1, NUMBER OF PROPAGATIONS
C    LDRWPH (READ/WRITE PROPAGATION HEADER)
C    LDRWPV (READ/WRITE PROPAGATION VECTORS)
C    DO J = 1, NUMBER OF MATRICES THIS PROPAGATION
C      LDRWMD (READ/WRITE MATRIX DATA)
C    ENDDO
C  ENDDO

C  THE HEADERS ALWAYS CONTAIN ENOUGH INFORMATION FOR ALLOCATION
C  OF APPROPRIATE MEMORY FOR SUBSEQUENT VECTOR OR MATRIX READS.

C  READ/WRITE GLOBAL HEADER.
C  WRITE OR READ FIRST RECORD OF FILE, CONTAINING SCALAR PARAMETERS
C  APPLICABLE TO ENTIRE MOLSCAT RUN. INPUTS BEYOND THE FIRST TWO ALL
C  HAVE THEIR NORMAL MOLSCAT DEFINITIONS.

      IMPLICIT NONE
      LOGICAL LWRITE
      INTEGER ILDSVU, ITYPE, NLEV, NLEVEL, NQN, NNRG, IPROGM
      CHARACTER LABEL*80
      DOUBLE PRECISION URED

      INTEGER LD_ERR
      INTEGER IERR

      IF (LWRITE) THEN
         IF (IPROGM.GE.17) THEN
           WRITE(6,*) ' **** ERROR **** CODE FOR LOG-DERIVATIVE '//
     1                'FILES NOT ALTERED FOR LATEST OUTPUT VERSION'
           STOP
         ENDIF
         WRITE(ILDSVU,IOSTAT=IERR) LABEL, ITYPE, NLEV, NLEVEL, NQN,
     1                             NNRG, URED, IPROGM
      ELSE
         IF (ILDSVU.GT.0) THEN
            READ(ILDSVU,IOSTAT=IERR) LABEL, ITYPE, NLEV, NLEVEL, NQN,
     1                               NNRG, URED, IPROGM
         ELSEIF (ILDSVU.LT.0) THEN  !DUMMY READ
            READ(-ILDSVU,IOSTAT=IERR)
         ENDIF
      ENDIF

      LDRWGH = LD_ERR(IERR, ILDSVU, LWRITE, 'LDRWGH')

      RETURN
      END
C--------------------------------------------------- END OF LDRWGH
      INTEGER FUNCTION LDRWGV(ILDSVU, LWRITE, NLEV, NQN, JLEV, NLEVEL,
     1                        ELEVEL, NNRG, ENERGY)
C
C  READ/WRITE GLOBAL VECTORS.
C  READ OR WRITE VECTORS THAT APPLY TO ALL PROPAGATIONS: JLEV,
C  ELEVEL, ENERGY.  THESE HAVE THEIR NORMAL MOLSCAT DEFINITIONS.

      IMPLICIT NONE
      LOGICAL LWRITE
      INTEGER ILDSVU, NLEV, NQN, NLEVEL, NNRG
      INTEGER JLEV(NLEV, NQN)
      DOUBLE PRECISION ELEVEL(NLEVEL), ENERGY(NNRG)

      INTEGER IERR
      INTEGER LD_ERR

      IF (LWRITE) THEN
         WRITE(ILDSVU,IOSTAT=IERR) JLEV, ELEVEL, ENERGY
      ELSE
         IF (ILDSVU.GT.0) THEN
            READ(ILDSVU,IOSTAT=IERR) JLEV, ELEVEL, ENERGY
         ELSEIF (ILDSVU.LT.0) THEN  !DUMMY READ
            READ(-ILDSVU,IOSTAT=IERR)
         ENDIF
      ENDIF

      LDRWGV = LD_ERR(IERR,ILDSVU, LWRITE, 'LDRWGV')

      RETURN
      END
C------------------------------------------------------ END OF LDRWGV
      INTEGER FUNCTION LDRWPH(ILDSVU, LWRITE, JTOT, INRG,
     1                        EN, IEXCH, WT, IBLOCK, NCH, ERED,
     2                        EP2RU)
      USE efvs
CER   INTEGER FUNCTION LDRWPH(ILDSVU, LWRITE, JTOT, INRG,
CER  *     EN, IEXCH, WT, IBLOCK, NCH, FIELD1, FIELD2)
C
C  READ/WRITE PROPAGATION HEADER.
C  READ/WRITE SCALAR HEADER FOR A SINGLE PROPAGATION.  JTOT AND IBLOCK HAVE
C  WHATEVER DEFINITIONS APPLY TO A PARTICULAR CALCULATION. NCH IS
C  MOLSCAT'S N, NUMBER OF CHANNELS.  EN IS THE SCATTERING ENERGY FOR
C  THIS CALCULATION, USUALLY EQUAL TO ENERGY(INRG).  FIELD1 AND FIELD2 ARE
C  FIELD STRENGTHS (MAGNETIC AND ELECTRIC, TYPICALLY.)

C  ERED AND EP2RU (USUAL MOLSCAT DEFINITIONS) ADDED TO CALL LIST
C  7 JAN 2013.  TO READ ILDSVU FILES WRITTEN BEFORE THAT DATE,
C  USE LINES MARKED CER IN PLACE OF THEIR MODERN VERSIONS JUST ABOVE.
C  16-1-2016: NUMBER OF EXTERNAL VARIABLES EXTENDED.  TO USE
C  THIS FUNCTION FOR FILES WRITTEN BETWEEN 2013 AND 2015 USE LINES
C  MARKED C16 IN PLACE OF THE CURRENT VERSIONS

      IMPLICIT NONE
      LOGICAL LWRITE
      INTEGER ILDSVU, JTOT, INRG, IEXCH, IBLOCK, NCH
      DOUBLE PRECISION URED, EN, WT, ERED, EP2RU

      INTEGER IERR,IEFV
      INTEGER LD_ERR

      IF (LWRITE) THEN
         WRITE(ILDSVU,IOSTAT=IERR) JTOT, INRG, EN, IEXCH, WT, IBLOCK,
     1                             NCH, ERED, EP2RU, IEFVST, NEFV,
     2                             ISVEFV
         WRITE(ILDSVU,IOSTAT=IERR) (EFV(IEFV),IEFV=IEFVST,NEFVP)
C16      WRITE(ILDSVU,IOSTAT=IERR) JTOT, INRG, EN, IEXCH, WT, IBLOCK,
C16  1                             NCH, FIELD1, FIELD2, ERED, EP2RU
CER      WRITE(ILDSVU,IOSTAT=IERR) JTOT, INRG, EN,
CER  *                             IEXCH, WT, IBLOCK, NCH, FIELD1, FIELD2
      ELSE
         IF (ILDSVU.GT.0) THEN
            READ(ILDSVU,IOSTAT=IERR) JTOT, INRG, EN, IEXCH, WT, IBLOCK,
     1                               NCH, ERED, EP2RU, IEFVST, NEFV,
     2                               ISVEFV
            NEFVP=MAX(NEFV,ISVEFV)
            READ(ILDSVU,IOSTAT=IERR) (EFV(IEFV),IEFV=IEFVST,NEFVP)
C16         READ(ILDSVU,IOSTAT=IERR) JTOT, INRG, EN, IEXCH, WT, IBLOCK,
C16  1                               NCH, FIELD1, FIELD2, ERED, EP2RU
CER         READ(ILDSVU,IOSTAT=IERR) JTOT, INRG, EN,
CER  *                               IEXCH, WT, IBLOCK, NCH, FIELD1, FIELD2
         ELSEIF (ILDSVU.LT.0) THEN  !DUMMY READ
            READ(-ILDSVU,IOSTAT=IERR)
         ENDIF
      ENDIF

      LDRWPH = LD_ERR(IERR, ILDSVU, LWRITE, 'LDRWPH')

      RETURN
      END
C -------------------------------------------------------- END OF LDRWPH
      INTEGER FUNCTION LDRWPV(ILDSVU, LWRITE, NCH, J, L, EINT)
C
C  READ/WRITE PROPAGATION VECTORS
C  READ/WRITE VECTORS ASSOCIATED WITH SINGLE PROPAGATION.  THESE
C  ARE MOLSCAT'S J (OR JJ), L, AND EINT VECTORS.

      IMPLICIT NONE
      LOGICAL LWRITE
      INTEGER ILDSVU, NCH
      INTEGER J(NCH),L(NCH)
      DOUBLE PRECISION EINT(NCH)

      INTEGER IERR
      INTEGER LD_ERR

      IF (LWRITE) THEN
         WRITE(ILDSVU,IOSTAT=IERR) J, L, EINT
      ELSE
         IF (ILDSVU.GT.0) THEN
            READ(ILDSVU,IOSTAT=IERR) J, L, EINT
         ELSEIF (ILDSVU.LT.0) THEN  !DUMMY READ
            READ(-ILDSVU,IOSTAT=IERR)
         ENDIF
      ENDIF

      LDRWPV = LD_ERR(IERR, ILDSVU, LWRITE, 'LDRWPV')

      RETURN
      END
C -------------------------------------------------------- END OF LDRWPV
      INTEGER FUNCTION LDRWMD(ILDSVU, LWRITE, NCH, R, Y)
C
C  READ/WRITE MATRIX DATA
C  READ/WRITE LOG DERIVATIVE MATRIX ITSELF. R IS THE R AT WHICH THE
C  LD MATRIX Y WAS COMPUTED. TO PERMIT WRITING OF SEVERAL LD MATRICES
C  IN A SINGLE PROPAGATION, WE WRITE A FLAG VARIABLE INTO A CODE
C  RECORD.  IF AN INITIAL TRIAL READ DOES NOT RETURN THIS FLAG
C  VARIABLE, WE BACKSPACE AND RETURN +1 TO INDICATE THAT NO MORE
C  MATRICES ARE AVAILABLE FROM THIS PROPAGATION.  END OF FILE IS
C  INDICATED BY THE NORMAL -1 RETURN VALUE GIVEN BY THE FORTRAN
C  IOSTAT RESULT.

      IMPLICIT NONE
      LOGICAL LWRITE
      INTEGER ILDSVU, NCH
      DOUBLE PRECISION R, Y(NCH,NCH)

      INTEGER IERR, ICODE, IDUM
      INTEGER LD_ERR

      INTEGER MATCODE
      PARAMETER (MATCODE = -687608722)  ! NOT A LIKELY JTOT VALUE


      IF (LWRITE) THEN
         WRITE(ILDSVU, IOSTAT=IERR) MATCODE
         IDUM = LD_ERR(IERR, ILDSVU, LWRITE,'LDRWMD') ! STOPS IF I/O ERROR
                                                      ! OCCURRED
         WRITE(ILDSVU,IOSTAT=IERR) R,Y
      ELSE
         READ(ABS(ILDSVU),IOSTAT=IERR) ICODE
         IF (IERR.EQ.0)  THEN   !FOUND A VALUE
            IF (ICODE.EQ.MATCODE) THEN !ANOTHER MATRIX AVAILABLE
               IF (ILDSVU.GT.0) THEN
                  READ(ILDSVU,IOSTAT=IERR) R,Y
               ELSEIF (ILDSVU.LT.0) THEN !DUMMY READ
                  READ(-ILDSVU,IOSTAT=IERR)
               ENDIF
            ELSE
               BACKSPACE ABS(ILDSVU) ! PROBABLY MATRIX HEADER;
                                     ! PUT FILE POINTER BACK
               LDRWMD = 1       ! SIGNAL NO MORE MATRICES THIS PROP
               RETURN           ! RETURN WITHOUT CALLING LD_ERR HERE
            ENDIF
         ENDIF
      ENDIF

      LDRWMD = LD_ERR(IERR, ILDSVU, LWRITE, 'LDRWMD')

      RETURN
      END
C ------------------------------------------------------ END OF LDRWMD
      INTEGER FUNCTION LD_ERR(IERR, ILDSVU, LWRITE, CALLER)
C
C  CHECKS FILE I/O STATUS INDICATOR.  IF ERROR, OR IF END OF FILE
C  ON WRITE, BAILS OUT.  IF END OF FILE ON READ, OR NO FLAG, RETURNS IERR.
C  THIS WILL GIVE A 0 RETURN ON SUCCESS, AND A NEGATIVE RETURN ON
C  END OF FILE DURING READS.

      IMPLICIT NONE
      INTEGER IERR, ILDSVU
      LOGICAL LWRITE
      CHARACTER CALLER*6

      IF (IERR.GT.0 .OR. (IERR.LT.0 .AND. LWRITE)) THEN
         WRITE(*,'(A,I4,A,A20)') 'I/O ERROR ON UNIT ILDSVU = ', ILDSVU,
     *                           ' DURING CALL TO ', CALLER
         WRITE(*,'(A,I4)') 'IERR = ', IERR
         STOP
      ENDIF

      LD_ERR = IERR

      RETURN
      END
