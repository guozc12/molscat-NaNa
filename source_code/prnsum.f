C  Copyright (C) 2020 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
C
C  This set of subroutines used to print out information relating to
C  the progress of a bound-state location
C================================================================ PRPRCT
      SUBROUTINE PRPRCT(NPROP,SVNAME,SVVAL,SVUNIT)
C  PRINT PROPAGATION NUMBER
      IMPLICIT NONE

      DOUBLE PRECISION, INTENT(IN) :: SVVAL
      CHARACTER(*),     INTENT(IN) :: SVNAME,SVUNIT
      INTEGER,          INTENT(IN) :: NPROP
      CHARACTER(53) SVTEMP !70-17
      INTEGER LENSV,I

      LENSV=LEN(TRIM(ADJUSTL(SVNAME)))
      SVTEMP=SVNAME
      SVTEMP=ADJUSTR(SVTEMP)
      DO I=1,52-LENSV,2
        SVTEMP(I:I)='-'
        SVTEMP(I+1:I+1)=' '
      ENDDO

      WRITE(6,100) NPROP,SVTEMP,SVVAL,SVUNIT
  100 FORMAT(/2X,'PROPAGATION ',I3,': ',A,' = ',1PG17.10,1X,A)
      RETURN
      END
C================================================================ PRNDCT
      SUBROUTINE PRNDCT(NSEEK)
C  PRINT (NODE) NUMBER OF BOUND STATE BEING SEARCHED FOR
      IMPLICIT NONE

      INTEGER, INTENT(IN) :: NSEEK

      WRITE(6,100) NSEEK
  100 FORMAT(/2X,59('- ')//'  SEARCHING FOR BOUND STATE NUMBER ',I5)

      RETURN
      END
C================================================================ PRBIS
      SUBROUTINE PRBIS(SVMIN,SVMAX,SVBIS,SVUNIT,METHOD)
C  PRINT POINTS USED BY ROOT-FINDING METHOD AND NEW POINT
      IMPLICIT NONE

      DOUBLE PRECISION, INTENT(IN) :: SVMIN,SVMAX,SVBIS
      CHARACTER(*),     INTENT(IN) :: SVUNIT,METHOD

      IF (METHOD.EQ.'BISECTION') THEN
        WRITE(6,100) SVMIN,SVMAX,SVBIS,SVUNIT
      ELSE
        WRITE(6,200) SVMIN,SVMAX,SVBIS,SVUNIT
      ENDIF
  100 FORMAT(/2X,'BISECTION ON RANGE ',1PG17.10,' TO ',G17.10,
     1       ' GIVES',10X,G17.10,1X,A) !28+34
  200 FORMAT(/2X,'SECANT WITH POINTS ',1PG17.10,' AND ',G17.10,
     1       ' GIVES',9X,G17.10,1X,A) !28+34

      RETURN
      END
C================================================================ PRMNMX
      SUBROUTINE PRMNMX(NODLO,NODHI,SVMIN,SVMAX,SVNAME,SVUNIT)
C  PRINT NODE COUNT AT MINIMUM AND MAXIMUM VALUES OF VARIABLE
      IMPLICIT NONE

      INTEGER,          INTENT(IN) :: NODLO,NODHI
      DOUBLE PRECISION, INTENT(IN) :: SVMIN,SVMAX
      CHARACTER(*),     INTENT(IN) :: SVNAME,SVUNIT

      IF (SVMIN.NE.SVMAX) THEN
        IF (SVNAME.EQ.'ENERGY') THEN
          WRITE(6,100) NODLO,'MINIMUM',TRIM(SVNAME),SVMIN,SVUNIT,
     1                 NODHI,'MAXIMUM',TRIM(SVNAME),SVMAX,SVUNIT
        ELSE
        WRITE(6,100) NODLO,'SPECIFIED ENERGY AT',TRIM(SVNAME),SVMIN,
     1               SVUNIT,
     2               NODHI,'SPECIFIED ENERGY AT',TRIM(SVNAME),SVMAX,
     3               SVUNIT
        ENDIF
        IF (NODHI.EQ.NODLO) THEN
          IF (SVNAME.EQ.'ENERGY') THEN
            WRITE(6,200) TRIM(SVNAME),'EFV SET'
          ELSE
            WRITE(6,200) TRIM(SVNAME),'ENERGY'
          ENDIF
        ENDIF
      ELSE
        WRITE(6,100) NODLO,TRIM(SVNAME),SVMIN,SVUNIT
      ENDIF
  100 FORMAT(/2X,'NODE COUNT IMPLIES ',I5,' STATES BELOW ',A,1X,A,' = ',
     1       1PG17.10,1X,A:/0P,
     2        2X,'NODE COUNT IMPLIES ',I5,' STATES BELOW ',A,1X,A,' = ',
     3       1PG17.10,1X,A)
  200 FORMAT(/'  NO NODES BETWEEN MINIMUM AND MAXIMUM ',A,'.'/
     1               '  CALCULATION WILL BE SKIPPED FOR THIS JTOT, ',
     2               'SYMMETRY BLOCK AND ',A)

      RETURN
      END
C================================================================ PREVAL
      SUBROUTINE PREVAL(NODE,EIGMIN)
C  PRINT NODE COUNT AND SMALLEST EIGENVALUE
      IMPLICIT NONE

      INTEGER,          INTENT(IN) :: NODE
      DOUBLE PRECISION, INTENT(IN) :: EIGMIN
      WRITE(6,100) NODE,EIGMIN
  100 FORMAT(2X,'NODE COUNT IS ',I5,' AND SMALLEST EIGENVALUE OF ',
     1       'MATCHING MATRIX IS ',1PG12.5)

      RETURN
      END
C================================================================ PRBEND
      SUBROUTINE PRBEND(ALGNAM)
C  PRINT NAME OF ALGORITHM USED
      IMPLICIT NONE

      CHARACTER(*), INTENT(IN) :: ALGNAM

      WRITE(6,100) TRIM(ALGNAM)
  100 FORMAT(/'  BISECTION TO FIND SINGLE-BOUND-STATE REGION FINISHED.',
     1        2X,'USING ',A,' TO GENERATE FUTURE POINTS.')

      RETURN
      END
C================================================================ PRVWST
      SUBROUTINE PRVWST(XA,XB,FA,FB,SVUNIT)
      IMPLICIT NONE

      DOUBLE PRECISION, INTENT(IN) :: XA,XB,FA,FB
      CHARACTER(*),     INTENT(IN) :: SVUNIT

      WRITE(6,100) XA,XB,SVUNIT,FA,FB
  100 FORMAT(/2X,'VWDB BEGINS WITH RANGE: ',1PG17.10,' TO ',G17.10,1X,A,
     2       /2X,'   SMALLEST EIGENVALUE: ',G17.10,4X,G17.10)

      RETURN
      END
C================================================================ PRVWDB
      SUBROUTINE PRVWDB(XA,XB,XC,SVNAME,SVUNIT,METHOD,SVVAL)
C  PRINT METHOD USED FOR CURRENT STEP IN VWDB ALGORITHM, AND NEW POINT
      IMPLICIT NONE

      INTEGER,          PARAMETER  :: LTEXT=70
      DOUBLE PRECISION, INTENT(IN) :: SVVAL,XA,XB,XC
      CHARACTER(*),     INTENT(IN) :: SVNAME,SVUNIT,METHOD
      CHARACTER(LTEXT) SVTEMP
      INTEGER L1,L2

      SVTEMP=' '
      SVTEMP(1:7)='APPLIES'
      L1=LEN(TRIM(METHOD))+9
      SVTEMP(9:L1)=TRIM(METHOD)
      IF (METHOD.NE.'INV Q INTERP') THEN
        SVTEMP(L1+1:L1+24)='TO THE FIRST TWO POINTS'
        L1=L1+24
      ENDIF
      SVTEMP(L1+1:L1+12)='WHICH GIVES'
      L2=LTEXT-LEN(TRIM(SVNAME))+1
      SVTEMP(L2:LTEXT)=TRIM(SVNAME)

      WRITE(6,100) XA,XB,XC,TRIM(SVUNIT),SVTEMP,SVVAL,SVUNIT
  100 FORMAT(/2X,'VWDB WITH POINTS AT: ',1PG17.10,', ',G17.10,' AND ',
     1       G17.10,1X,A/2X,A,' = ',G17.10,1X,A)

      RETURN
      END
C================================================================ PRINCR
      SUBROUTINE PRINCR(FLDNEW,SVUNIT,METHOD,EIGMIN,NODE,
     1                  FSMALL,XSMALL,CONVGE)
      IMPLICIT NONE

      INTEGER,          INTENT(IN) :: NODE
      DOUBLE PRECISION, INTENT(IN) :: FLDNEW,EIGMIN,FSMALL,XSMALL
      CHARACTER(*),     INTENT(IN) :: SVUNIT,METHOD
      LOGICAL,          INTENT(IN) :: CONVGE

      WRITE(6,100) FLDNEW,TRIM(SVUNIT),TRIM(METHOD),EIGMIN
  100 FORMAT(/2X,'POINT AT ',1PG17.10,1X,A,' PREDICTED BY ',A,' GAVE ',
     1           'INCREASED MAGNITUDE OF SMALLEST EIGENVALUE OF '/
     2        2X,'MATCHING MATRIX  (VALUE WAS ',G12.5,')')

      IF (.NOT.CONVGE)
     1  WRITE(6,*)' CONVERGENCE CRITERION DTOL MAY BE TOO SMALL'

      WRITE(6,200) NODE,XSMALL,TRIM(SVUNIT),FSMALL
  200 FORMAT(/2X,'CONVERGENCE ON BOUND STATE ',I5,' TERMINATED AT ',
     1        1PG17.10,1X,A,' WHERE SMALLEST EIGENVALUE IS ',G12.5)

      RETURN
      END
C================================================================ PRCONV
      SUBROUTINE PRCONV(NSEEK,SVNAME,SVVAL,SVUNIT,NODE,ZCNTN,CONVGE,
     1                  METHOD)
C  PRINT LOCATION OF BOUND STATE, TOGETHER WITH CAVEATS IF ANY
      USE efvs, ONLY: EFV, ISVEFV
      IMPLICIT NONE

      INTEGER,          INTENT(IN) :: NODE,NSEEK
      DOUBLE PRECISION, INTENT(IN) :: SVVAL
      CHARACTER(*),     INTENT(IN) :: SVNAME,SVUNIT
      LOGICAL,          INTENT(IN) :: ZCNTN,CONVGE
      CHARACTER(*),     INTENT(IN) :: METHOD
      CHARACTER(35) SVTEMP

      SVTEMP=TRIM(SVNAME)
      SVTEMP=ADJUSTR(SVTEMP)

      IF (CONVGE) THEN
        IF (ZCNTN .AND. (NODE.EQ.NSEEK .OR. NODE.EQ.NSEEK-1)) THEN
          WRITE(6,100) NSEEK,SVTEMP,SVVAL,SVUNIT
        ELSEIF (NODE.NE.NSEEK .AND. NODE.NE.NSEEK-1) THEN
          WRITE(6,200) NSEEK,SVTEMP,SVVAL,TRIM(SVUNIT),NODE
        ELSE
          WRITE(6,300) NSEEK,SVTEMP,SVVAL,TRIM(SVUNIT)
        ENDIF
      ELSE
        WRITE(6,400) NSEEK,SVTEMP(2:35),SVVAL,TRIM(SVUNIT)
      ENDIF
  100 FORMAT(/2X,'CONVERGED ON STATE NUMBER ',I5,' AT ',A,' = ',
     1       1PG17.10,1X,A) !35+A1
  200 FORMAT(/2X,'CONVERGED ON STATE NUMBER ',I5,' AT ',A,' = ',
     1       1PG17.10,1X,A/'  BUT LAST NODE COUNT = ',0P,3X,I5,
     2       ' NOT AS DESIRED')
  300 FORMAT(/2X,'CONVERGED ON STATE NUMBER ',I5,' AT ',A,' = ',
     1       1PG17.10,1X,A,' BUT VARIABLE IS OUTSIDE RANGE')
  400 FORMAT(/2X,'NOT CONVERGED ON STATE NUMBER ',I5,'.',A,' = ',
     1       1PG17.10,1X,A,' IS CURRENT BEST ESTIMATE')

      IF (EFV(0).NE.1.D0 .AND. ISVEFV.NE.0)
     1  WRITE(6,*) ' WITH SCALING FACTOR',EFV(0)
      IF (TRIM(METHOD).EQ.'BISECTION')
     1  WRITE(6,*) ' BOUND STATE LOCATED BY BISECTION SO PROBABLE '//
     2             'ERROR IS DTOL/2'

      RETURN
      END
C================================================================ PRLAST
      SUBROUTINE PRLAST(SVSTEP,SVUNIT)
C  PRINT SIZE OF LAST STEP
      IMPLICIT NONE

      DOUBLE PRECISION, INTENT(IN) :: SVSTEP
      CHARACTER(*),     INTENT(IN) :: SVUNIT

      WRITE(6,100) SVSTEP,SVUNIT
  100 FORMAT(/2X,'LAST STEP WAS',60X,1PG17.10,1X,A) !13+20

      RETURN
      END
C================================================================ PRLOC
      SUBROUTINE PRLOC(TIME)
C  PRINT TIME TAKEN TO LOCATE BOUND STATE
      IMPLICIT NONE

      DOUBLE PRECISION, INTENT(IN) :: TIME

      WRITE(6,100) TIME
  100 FORMAT(/2X,'TIME TO LOCATE THIS STATE WAS ',F8.2,' CPU SECONDS')

      RETURN
      END
