      SUBROUTINE DRIVER
C  Copyright (C) 2020 J. M. Hutson & C. R. Le Sueur
C  Distributed under the GNU General Public License, version 3
      USE efvs
      USE potential
      USE basis_data, ONLY: NJLQN9
      USE physical_constants
      USE sizes, MXFLD => MXFLD_in_BOUND
C
C***********************************************************************
C
C  ---------------  BOUND - J.M. HUTSON & C.R. LE SUEUR  ---------------
C
C  QUANTUM MOLECULAR BOUND-STATE PROGRAM
C
C  BOUND VERSION 5 HAS COMPLETELY REWRITTEN EIGENVALUE SEARCHING
C  LOGIC BASED ON NODE COUNTS AND THE EIGENVALUES OF THE
C  LOG-DERIVATIVE MATCHING MATRIX
C
C  BOUND VERSION 6 WAS A PRIVATE JMH CODE
C  BOUND VERSIONS 7 TO 14 NEVER EXISTED: THE MARCH 2002 VERSION WAS
C  NAMED VERSION 15 TO BRING THE NUMBERING INTO LINE WITH MOLSCAT
C
C  CURRENT VERSION: 2020.0
C***********************************************************************
C
C  DEFAULT UNITS ARE
C   MASSES IN UNIFIED ATOMIC MASS UNITS (DALTONS, CARBON MASS/12)
C   ENERGIES AS WAVENUMBERS IN CM-1
C   LENGTHS IN ANGSTROMS
C  BUT THESE MAY BE CHANGED VIA THE VARIABLES EUNITS, EUNIT, MUNIT, RUNIT

C  ENERGIES ARE OFTEN WRITTEN OUT IN CM-1 AS WELL AS THE SPECIFIED UNITS
C
C  RMIN   IS THE RADIUS AT WHICH THE OUTWARDS PROPAGATION IS BEGUN
C  RMAX   IS THE RADIUS AT WHICH THE INWARDS  PROPAGATION IS BEGUN
C  RMATCH IS THE MATCHING POINT
C  RMID   IS THE POINT AT WHICH THE PROPAGATION METHOD CHANGES (IF IT DOES)
C
C  IPROPS AND IPROPL CONTROL METHODS OF PROPAGATING SOLUTIONS TO COUPLED
C  EQUATIONS
C  NHAM AND MXLAM CONTROL SUM OVER ANGULAR DEPENDENCE OF POTENTIAL
C  NQN IS NO. OF QUANTUM NUMBERS USED TO DESCRIBE INTERACTION PARTNERS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      logical :: inolls=.false.
cINOLLS include 'fpvm3.h'
      PARAMETER (NEXP=10,MXMNQN=10)
      INTEGER EUNITS,PRNTLV,SHRINK,MONQN(MXMNQN)
      DOUBLE PRECISION MUNIT
cINOLLS include 'all/pvmdat1.f'
C
C  ARRAY TO HOLD TIME AND DATE
      CHARACTER CTIME*9,CDATE*11

      CHARACTER METHOD*12
C
      LOGICAL LFSCAN,LFSRCH,NOBIS,REBIS,LESCAN,LIPEFV
      LOGICAL CONVGE,ENOISE,ZBRENT,LSKIP
C
      CHARACTER(80)  LABEL
      CHARACTER(122) LABL
      CHARACTER(3)   C1,C2
      CHARACTER(40)  FTITLE
      CHARACTER(8)   EUNAME
      CHARACTER(20)  PDATE
      CHARACTER(10)  RUNAME
C
C  FOLLOWING ARRAYS ALL HAVE DIMENSION MXNODE. MXNODE IS THE MAXIMUM
C  NUMBER OF NODES THAT CAN BE SOUGHT IN A SINGLE RUN.
C
      DIMENSION EHI(MXNODE),ELO(MXNODE),EIGHI(MXNODE),EIGLO(MXNODE),
     1          NLO(MXNODE),NHI(MXNODE),IHI(MXNODE),ILO(MXNODE)
C
C  VARIABLES DIMENSIONED FOR SAVING CONVERGED EIGENVALUES
      DIMENSION EREFP(0:NEXP),EVAL(MXNODE,NEXP),EXTRAP(MXNODE),
     1          EXTRAV(MXNODE,NEXP),NCHECK(MXNODE)
C
C  ARRAYS FOR EFVS
      DIMENSION FIELD(MXFLD)
      DIMENSION FIXFLD(MXEFV),IFVARY(MXEFV)
      LOGICAL ZCNTN
      DIMENSION OLDFAC(MXOMEG)
C
C  VARIABLES FOR EXPECTATION VALUES
      DIMENSION IPPERT(NEXP),NPOW(NEXP),DELTA(NEXP),FACTOR(NEXP)
C
C     include common block for data received via pvm
C
cINOLLS include 'all/pvmdat.f'
C
C  DYNAMIC STORAGE COMMON BLOCK ...
      COMMON /MEMORY/ MX,IXNEXT,NIPR,IDUMMY,X(1)
      COMMON /VLFLAG/ IVLFL
C  MX,IXNEXT ARE MAX AND NEXT AVAILABLE LOCATION IN X() ARRAY
C  NIPR IS NUMBER OF INTEGERS PER REAL; SHOULD BE 1 OR 2.
C    E.G. FOR IBM R*8/I*4, NIPR=2.  AN INTEGER ARRAY OF DIM. N
C    CAN BE STORED IN A REAL ARRAY OF DIMENSION (N+NIPR-1)/NIPR.
C  IVLFL FLAGS WHETHER IV() ARRAY IS USED AS POINTER W/ VL ARRAY.
C
C  COMMON BLOCK FOR CONTROL OF USE OF PROPAGATION SCRATCH FILE
      LOGICAL IREAD,IWRITE
      COMMON /PRPSCR/ ESHIFT,ISCRU,IREAD,IWRITE
C
C  COMMON BLOCK FOR CONTROL OF PROPAGATION SEGMENTS
      COMMON /RADIAL/ RMNINT,RMXINT,RMID,RMATCH,DRS,DRL,STEPS,STEPL,
     1                POWRS,POWRL,TOLHIS,TOLHIL,CAYS,CAYL,unset,
     2                IPROPS,IPROPL,NSEG
      PARAMETER (PUNSET=-237540475023D30)
C
      COMMON /VLSAVE/ IVLU
C
C  COMMON BLOCK FOR EXPECTATION VALUES, COMMUNICATING WITH PERTRB
      COMMON /EXPVAL/ IPERTN,NPOWN,DELTAN

C  COMMON BLOCK FOR NUMERICAL DERIVATIVES
      COMMON /DERIVS/ NUMDER
      LOGICAL NUMDER

C  COMMON BLOCK TO DESCRIBE WHICH DRIVER IS USED
      COMMON /CNTROL/ CDRIVE
      CHARACTER(1) CDRIVE

C  COMMON BLOCK FOR INPUT/OUTPUT CHANNEL NUMBERS
      LOGICAL PSIFMT
      COMMON /IOCHAN/ IPSISC,IWAVSC,IPSI,NWVCOL,PSIFMT
      DATA IPSISC,IPSI,IWAVSC/108,109,110/
      DATA PSIFMT/.TRUE./
      LOGICAL WAVE

C  COMMON BLOCK FOR CONTROL OF PROPAGATION BOUNDARY CONDITIONS
      COMMON /BCCTRL/ BCYCMN,BCYCMX,BCYOMN,BCYOMX,ADIAMN,ADIAMX,
     1                WKBMN,WKBMX
      LOGICAL ADIAMN,ADIAMX,WKBMN,WKBMX
C
      NAMELIST /INPUT/ ADIAMN, ADIAMX, BCYCMN, BCYCMX, BCYOMN,
     1                 BCYOMX, DEGTOL, DELTA,  DFIELD, DNRG,
     2                 DR,     DRAIRY, DRCON,  DRL,    DRS,
     3                 DTOL,   ECTRCT, EMAX,   EMIN,   EPL,
     4                 EPS,    EREF,   EUNITS, EUNAME, EUNIT,
     5                 FACTOR, FIELD,  FIXFLD, FLDMAX, FLDMIN,
     6                 IBDSUM, IBFIX,  IBHI,   ICON,   IFIELD,
     7                 IFVARY, IMGSEL, INTFLG, IPPERT, IPRINT,
     8                 IPROPL, IPROPS, IPSI,   IPSISC, IREF,
     9                 IRMSET, ISCRU,  IWAVE,  IWAVSC, JSTEP,
     A                 JTOTL,  JTOTU,  KSAVE,  LABEL,  LASTIN,
     B                 MAGEL,  MHI,    MONQN,  MSET,   MUNIT,
     C                 MXCALC, NCONV,  NFIELD, NFVARY, NOBIS,
     D                 NODMAX, NODMIN, NPERT,  NPOW,   NUMDER,
     E                 PHILW,  PHIST,  POWRX,  POWRL,  POWRS,
     F                 PRNTLV, RCTRCT, REBIS,  RMATCH, RMAX,
     G                 RMID,   RMIN,   RUNIT,  RUNAME, SCALAM,
     H                 STEPL,  STEPS,  THETLW, THETST, TOLHI,
     I                 TOLHIL, TOLHIS, URED,   WKBMN,  WKBMX,
C
C  UNUSED NAMELIST VARIABLES RETAINED FOR DATA-FILE COMPATIBILITY
C
     1                 IRXSET,ISAVEU,ISIGPR,MXSIG,OTOL
      EQUIVALENCE (IPRINT,PRNTLV),(IBDSUM,KSAVE),(IBFIX,MSET),
     1            (IBHI,MHI)
C
      DIMENSION NLABV(9),NJLQN(9)
C  NLABV ARRAY CONTAINS NUMBER OF LABELS PER SYMMETRY TERM FOR EACH
C  VALUE OF ITYPE.
      DATA NLABV /1,3,3,4,2,2,5,2,1/
C  NJLQN ARRAY CONTAINS NUMBER OF QUANTUM NUMBER NEEDED TO IDENTIFY A
C  LEVEL CONTAINED IN JLEVEL. (VALUE FOR ITYP=9 IS A DUMMY VALUE)
      DATA NJLQN/1,2,2,3,3,2,2,2,1/
C
      DATA LABEL /'        '/
      DATA IPROGM /19/, PDATE /'2020.01'/
      DATA CDRIVE /'B'/
C
C  THE PHYSICAL CONSTANTS USED ARE COMBINED IN THE SINGLE NUMBER BFCT.
C  BFCT IS HBAR/(4PI*C) IN UNITS OF (ATOMIC MASS UNITS)*(WAVENUMBERS)
C                                      *(ANGSTROMS**2).
C  BFCT IS NOW IN MODULE physical_constants
C
C  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
C
C     include statements to enroll program in PVM
C
cINOLLS include 'all/pvmdat2.f'
C
      MXSAVE=MX
   10 MX=MXSAVE
      unset=PUNSET
      CALL GCLOCK(TFIRST)
      CALL GDATE(CDATE)
      CALL GTIME(CTIME)
C
C  SET PARAMETERS IN COMMON/MEMORY/
C
      NIPR=2
      IXNEXT=1
C  SET NUSED.LT.0 AND CALL CHKSTR TO RESET COUNTER FOR EACH &INPUT.
      NUSED=-1
      CALL CHKSTR(NUSED)
C  SET DEFAULT NAMES FOR UNITS USED BY POTENTIAL ROUTINES
      EPNAME='EPSIL'
      RMNAME='RM'
C
C  SET INITIAL VALUES BEFORE READ(5,INPUT) . . .
C
      ADIAMN=.TRUE.
      ADIAMX=.TRUE.
      BCYCMN=-1.0D0
      BCYCMX=-1.0D0
      BCYOMN=unset
      BCYOMX=0.0D0
      DEGTOL=1.0D-10
      DO I=1,NEXP
        DELTA(I)=1.0D-3
        FACTOR(I)=1.D0
        IPPERT(I)=I
      ENDDO
      DFIELD=1.0D0
      DNRG=1D30
      DR=0.02D0
      DRAIRY=unset
      DRCON=0.1D0
      DRL=unset
      DRS=unset
      DTOL=1.0D-7
      ECTRCT=-1.0D30
      EMAX=1.0D30
      EMIN=-EMAX
      EPL=0.D0
      EPS=0.D0
      EREF=0.0D0
      EUNITS=1
      EUNAME='E UNITS'
      EUNIT=1.D0
      DO I=1,MXFLD
        FIELD(I)=0.0D0
      ENDDO
      DO I=1,MXEFV
        EFVNAM(I)=' '
        EFVUNT(I)=' '
        FIXFLD(I)=0.0D0
        IFVARY(I)=MXEFV+1
      ENDDO
      FLDMAX=0.0D0
      FLDMIN=0.0D0
      IBDSUM=0
      IBFIX=0
      IBHI=0
      ICON=1
      IFIELD=-1 ! MLEO'S, REPLACED IFIELD=4 ON 19/09/07
      IMGSEL=4
      INTFLG=0
      IPRINT=2
      IPROPL=0
      IPROPS=0
      IREF=0
      IRMSET=0
      ISCRU=0
      IWAVE=0
      JSTEP=1
      JTOTL=0
      JTOTU=0
      LABEL=' '
      LASTIN=1
      MAGEL=1
      MONQN(1)=-99999
      MUNIT=1.D0
      MXCALC=1000
      NCONV=0
      NFIELD=1
      NFVARY=-1
      NITER=20
      NOBIS=.FALSE.
      NODMAX=99999
      NODMIN=0
      NPERT=0
      NPOW=0
      NUMDER=.FALSE.
      PHILW=0.0D0
      PHIST=0.0D0
      POWRX=3.0D0
      POWRL=unset
      POWRS=unset
      RCTRCT=0.0D0
      REBIS=.TRUE.
      RMATCH=unset
      RMAX=10.0D0
      RMID=unset
      RMIN=0.8D0
      RUNAME='RUNIT'
      RUNIT=unset
      SCALAM=1.0D0
      STEPL=unset
      STEPS=-10.0D0
      THETLW=0.0D0
      THETST=0.0D0
      TOLHI=1.0D-4
      TOLHIL=unset
      TOLHIS=unset
      URED=0.0D0
      WKBMN=.TRUE.
      WKBMX=.TRUE.
C  OTHER VARIABLES
      DRMAX=5.0D0
      ILDSVU=0  ! FOR BOUND, TURN OFF ILDSVU
      ITPSUB=0
      MAPEFV=0
      NCALC=0
      NDGVL=0
      NEFV=-1
      NHAM=0
      NJLQN9=99999
      NUSED=0
      PI=ACOS(-1.0D0)
C
      if (.not.inolls) READ(5,INPUT,END=999)
C
C     include statements to receive, unpack and allocate data to
C     variables
C
cINOLLS include 'bound/rinput-v2018.f'
C
      LABEL=ADJUSTL(LABEL)
      LABLEN=MAX(LEN(TRIM(LABEL)),1)
      L1=(116-LABLEN)/2
      L2=116-L1-LABLEN
      WRITE(C1,'(I3)') L1
      WRITE(C2,'(I3)') L2
      FTITLE="(1X,"//ADJUSTR(C1)//"('='),' ',A,' ',"//ADJUSTR(C2)//
     1       "('='))"
      WRITE(LABL,FMT=FTITLE) TRIM(LABEL)

      IF (URED.EQ.0.0D0) THEN
        WRITE(6,*) ' YOU HAVE FORGOTTEN THE REDUCED MASS'
        STOP
      ENDIF
C
      IF (IPRINT.GE.1) THEN
        WRITE(6,1001)
 1001   FORMAT(2X,'-- BOUND ---',4('--- BOUND ---'),'--- BOUND --')
        WRITE(6,1002)
 1002   FORMAT(' |',76X,'|'/' |',10X,
     2         'Bound states of interacting pairs of atoms and ',
     3         'molecules',10X,'|')
        CALL PROGVS(PDATE)
        CALL TIMEST(CDATE,CTIME)
        WRITE(6,1001)
        CALL CPRMSB('BOUND  ',PDATE)
      ENDIF
C
      IF (IPRINT.GE.1) WRITE(6,1003) NIST_year
 1003 FORMAT(/'  USING CODATA ',I4,' RECOMMENDED VALUES OF',
     1   ' FUNDAMENTAL PHYSICAL CONSTANTS')
C
      IF (IPRINT.GE.1) THEN
        AMXKB=DBLE(MX)/128.0D0/1024.0D0
        WRITE(6,1004) MX,AMXKB
 1004   FORMAT(/'  MEMORY ALLOCATED TO MAIN WORKING ARRAY IS',I10,
     1          ' (8-BYTE) WORDS (',F8.2,' MB)')
      ENDIF

      IF (IPRINT.GE.1) WRITE(6,1007) IPRINT
 1007 FORMAT(/'  PRINT LEVEL (IPRINT) =',I3)

      IF (IPRINT.GE.1) THEN
        IF (MUNIT.EQ.1.D0) THEN
          WRITE(6,1009) URED
 1009     FORMAT(/'  REDUCED MASS FOR INTERACTION =',F14.9,
     1            ' ATOMIC MASS UNITS (DALTONS)')
        ELSE
          WRITE(6,1010) URED,MUNIT
 1010     FORMAT(/'  REDUCED MASS FOR INTERACTION =',F14.9,
     1            ' (UNITS OF',1PG16.9,' DALTONS)')
        ENDIF
      ENDIF
C
      IF (ISCRU.LT.0) THEN
        IF (IPRINT.GE.1) WRITE(6,1020)
 1020   FORMAT('  *** WARNING. THE OPTION TO REUSE A SCRATCH FILE ',
     1         'FROM A PREVIOUS RUN IS NOT SUPPORTED IN THIS VERSION ',
     2         'OF BOUND')
        ISCRU=ABS(ISCRU)
      ENDIF
C
      IF (ISCRU.EQ.0) THEN
        IF (IPRINT.GE.1) WRITE(6,1030)
 1030   FORMAT(/'  NO SCRATCH FILE SPECIFIED BY ISCRU PARAMETER: ',
     1         'FULL CALCULATION WILL BE DONE AT EACH ENERGY')
      ELSE
        IF (IPRINT.GE.1) WRITE(6,1031) ISCRU
 1031   FORMAT(/'  ENERGY-INDEPENDENT MATRICES WILL BE SAVED ',
     1         'TEMPORARILY ON UNIT',I3)
      ENDIF
C
C  PROCESS TOTAL ENERGIES
C
      IF (EUNITS.NE.0) CALL ECNV(EUNITS,EUNIT,EUNAME,IPRINT)
C
      IF (EMAX.LE.EMIN) THEN
        WRITE(6,1050) EMIN,EMAX
 1050   FORMAT(/'  *** ERROR. EMAX MUST BE GREATER THAN EMIN.'/
     1         6X,'EMIN =',F12.5,' AND EMAX =',F12.5)
        STOP
      ENDIF
C
      NNRG=1+(EMAX-EMIN)/DNRG
      IF (NNRG.EQ.1) NNRG=2
      DTOL=DTOL*EUNIT
      EMIN=EMIN*EUNIT
      EMAX=EMAX*EUNIT
      DNRG=DNRG*EUNIT
      EPS=EPS*EUNIT
      EPL=EPL*EUNIT
      ECTRCT=ECTRCT*EUNIT
C
      IF (IPRINT.GE.1) WRITE(6,1060)
 1060 FORMAT(/2X,59('=='))
C
C--------------------------------------------------------------------
C  INITIALIZE BASIS ROUTINE  -----------------
C  COMBINED MOLSCAT (BASIN) AND IOS (IOSBIN) -- APR 86
C  IOSBIN IS NOT PART OF THE BOUND PROGRAM
C
      IXJSTT=IXNEXT
      NSTATE=MX
      CALL BASIN(NSTATE,X(IXJSTT),URED,NQN,NLABV(9),MXPAR,ITYPE,IPRINT,
     1           IOSFLG,IBOUND,NLEVEL,X(ISJSTT))
C  BASE ROUTINE INCREMENTS IXNEXT BY AMOUNT OF STORAGE IN JSTATE.
      CALL CHKSTR(NUSED)
      IVLSAV=IVLU
      IF (IPRINT.GE.1) WRITE(6,1060)
C
C  IF NEXTRA HAS BEEN SET, ASSUME THAT DEGTOL IS NEEDED
      IF (NEXTRA.NE.0) THEN
        DEGTOL=DEGTOL*EUNIT
        IF (IPRINT.GE.1) THEN
          IF (EUNIT.NE.1.D0) THEN
            WRITE(6,1101) DEGTOL,DEGTOL/EUNIT,EUNAME
          ELSE
            WRITE(6,1101) DEGTOL
          ENDIF
          WRITE(6,1102) NEXTRA
        ENDIF
 1101   FORMAT(/2X,'EXTRA OPERATORS WILL BE USED TO RESOLVE ',
     1         'ASYMPTOTIC DEGENERACIES CLOSER THAN'/2X,'DEGTOL =',
     2         G16.8,' CM-1 =',G16.8,1X,A)
 1102   FORMAT(2X,'THERE ARE ',I3,' EXTRA OPERATORS')
      ENDIF

      LFSRCH=.FALSE.
      LFSCAN=(FLDMIN.NE.0.0D0 .OR. FLDMAX.NE.0.0D0)
      LESCAN=(ABS(DNRG).LT.ABS(EMIN-EMAX) .OR. EMIN.EQ.EMAX)
C  INITIALISE ALL EXTERNAL VARIABLE QUANTITIES
      CALL INIEFV(FIXFLD,IPRINT,FLDMIN,FLDMAX,DFIELD,
     1            NFIELD,FIELD,MAGEL,NFVARY,IFVARY,LFSRCH,LFSCAN)
      SVNAME='ENERGY'
      SVUNIT=ADJUSTL(EUNAME)

      LENEFV=MAX(NEFVP-IEFVST+1,0)
C
C--------------------------------------------------------------------
C  INITIALIZE POTENTIAL.
C   EP2CM  (POTENTIAL ENERGY UNIT) MUST BE SET IN POTENL
C   RPUNIT (POTENTIAL LENGTH UNIT) MAY OPTIONALLY BE SET IN POTENTIAL
C     IF RPUNIT IS SET AND RUNIT IS UNSET, RUNIT IS TAKEN FROM RPUNIT,
C     AND VICE VERSA. IF BOTH ARE SET, POTENL USES SEPARATE LENGTH UNITS.
C     IF NEITHER IS SET, THEY DEFAULT TO 1 (ANGSTROMS).
C     THE SCALING FACTOR RUNIT/RPUNIT IS PLACED IN RSCALE.
C
      ILAM=IXNEXT
      MXLAM=NIPR*(MX-ILAM+1)
C
      RPUNIT=unset
      CALL POTENL(-1,MXLAM,X(ILAM),RPUNIT,EP2CM,ITYPE,IPRINT)
C
      CALL CHCKRU(RUNIT,RUNAME,RPUNIT,RSCALE,unset,IPRINT)
C
C  THE PROGRAM WORKS WITH REDUCED ENERGIES IN UNITS OF 1/RUNIT**2
C  ALL DISTANCES ARE IN THESE R UNITS.
C  CM2RU CONVERTS ENERGIES IN CM-1 INTO UNITS OF 1/RUNIT**2
C  EP2RU CONVERT THE INTERACTION POTENTIAL INTO UNITS OF 1/RUNIT**2
C
      CM2RU=URED*MUNIT*RUNIT*RUNIT/BFCT
      EP2RU=EP2CM*CM2RU
C
      ITYP=MOD(ITYPE,10)
      IXNEXT=IXNEXT+(MXLAM*NLABV(ITYP)+NIPR-1)/NIPR

      CALL GNHAM(IPRINT,ITYPE,NLABV(ITYP),MXLAM,NHAM,X(ILAM))

      CALL CHKSTR(NUSED)
      IC1=IXNEXT
      IF (IPRINT.GE.1) WRITE(6,1060)
C
C  PROCESS REQUESTED PROPAGATOR -- AND ITS INPUT DATA.
C
      CALL PROPST(RMIN,RMAX,DR,IRMSET,0,0.D0,
     1            INTFLG,IMGSEL,IPRINT,
     2            EPS,EPL,POWRX,TOLHI,DRMAX,NSTAB)
C
C  IF WAVEFUNCTIONS ARE REQUESTED, 3 EXTRA FILES ARE USED:
C  CHANNEL IWAVSC   SCRATCH  SAVING BITS REQUIRED FOR WAVEFN PROPAGATION
C  CHANNEL IPSISC   SCRATCH  SAVING WAVEFN AS CREATED BY MDPROP
C  CHANNEL IPSI     FINAL FILE WITH WAVEFN SEQUENTIALLY FROM RMIN TO RMAX
C  OPEN TEMPORARY FILES LATER AS N IS REQUIRED FOR RECORD LENGTH
C
      WAVE=(IWAVE.NE.0 .AND. IPROPS.EQ.6 .AND. IPROPL.EQ.6)
      IF (IWAVE.NE.0 .AND. .NOT.WAVE) THEN
        WRITE(6,1110)
 1110   FORMAT(/'  WAVEFUNCTIONS ONLY AVAILABLE FOR LDMD PROPAGATOR:',
     1         ' REQUEST CANCELLED')
      ENDIF
C
C  WRITE HEADER ON WAVEFUNCTION FILE
C
      IF (WAVE) CALL WVHEAD(IPROGM,LABEL,ITYPE,IBOUND,URED,MUNIT,RUNIT,
     1                      EUNIT,IPRINT)
C
      IF (RCTRCT.GT.0.D0 .AND. (IPROPS.EQ.6 .OR. IPROPL.EQ.6)) THEN
        WRITE(6,*) ' CURRENT IMPLEMENTATION OF LDMD PROPAGATOR'//
     1             ' DOES NOT ALLOW CONTRACTED BASIS SETS: TRY'//
     2             ' LDJ PROPAGATOR (CODE 5) INSTEAD'
        STOP
      ENDIF
      IF (IPRINT.GE.1) WRITE(6,1060)
C
      EFIRST=EMIN*CM2RU
      EBAS=EFIRST
C
      IF (ITYPE.EQ.8) EBAS=100.0D0

      EREF=EREF*EUNIT
      NJLQN(9)=NQN-1
      IF (ITYP.EQ.9 .AND. NJLQN9.NE.99999) NJLQN(9)=MIN(NJLQN9,NQN-1)
C
C  EINT AND JSINDX ARE NOT DEFINED YET BUT ARE NOT NEEDED IN THIS CALL
C
      IF (NCONST.EQ.0 .AND. NDGVL.EQ.0)
     1             CALL THRESH(X(ISEINT),N,CM2RU,ITYPE,MONQN,NQN,
     2                         NJLQN(ITYP),EREF,X(ISJIND),0)

      IF (IPRINT.GE.1) THEN
        IF (.NOT.LESCAN) THEN
          WRITE(6,'(/2X,A)') 'PROGRAM WILL ATTEMPT TO CONVERGE ON '//
     1                       'BOUND STATES AS A FUNCTION OF ENERGY'
          WRITE(6,1330)
 1330     FORMAT(/'  FOR EACH LEVEL, THE BISECTION METHOD WILL BE USED',
     1           ' UNTIL THE VWDB METHOD OFFERS RELIABLE CONVERGENCE.')
          WRITE(6,1340) DTOL/EUNIT,EUNAME
 1340     FORMAT(/'  VWDB CONVERGENCE WILL TERMINATE WHEN THE STEP ',
     1            'SIZE IS LESS THAN',1PG12.5,1X,A)
        ENDIF
C  IF EXTERNAL FIELDS OR POTENTIAL SCALING INCLUDED, WRITE SUMMARY
        IF (NEFV.GT.0 .OR. ISVEFV.EQ.0) THEN

C  WRITE HEADER
          CALL MSGEFV(0,NFIELD)

          DO IFLD=1,NFIELD
C  WRITE MESSAGE FOR THIS CYCLE
            CALL SETEFV(FIELD,SV_VAL)
            CALL MSGEFV(-IFLD,NFIELD)
          ENDDO

C  RESET VALUES READY FOR LOOP LATER ON
          CALL RSTEFV(FIXFLD)
        ENDIF

        IF (EUNITS.EQ.1) THEN
          IF (IPRINT.GE.1) WRITE(6,1200)
        ELSEIF (EUNITS.LE.9) THEN
          WRITE(6,1210) TRIM(EUNAME),EUNITS
        ELSE
          WRITE(6,1220) TRIM(EUNAME),EUNITS
        ENDIF
 1200   FORMAT(/'  INPUT ENERGIES IN UNITS OF CM-1 BY DEFAULT.')
 1210   FORMAT(/'  INPUT ENERGIES CONVERTED FROM ',A/
     1         '  TO INTERNAL WORKING UNITS OF CM-1 DUE TO INTEGER ',
     2         'INPUT EUNITS =',I4)
 1220   FORMAT(/'  INPUT ENERGIES CONVERTED FROM ',A/
     1          '  TO INTERNAL WORKING UNITS OF CM-1 DUE TO ',
     2          'ALPHANUMERIC INPUT EUNITS =',A4)

        IF (LESCAN) THEN
          WRITE(6,1300) EMIN/EUNIT,EUNAME,EMAX/EUNIT,EUNAME,
     1                  DNRG/EUNIT,EUNAME
 1300     FORMAT(/'  PROGRAM WILL SCAN ENERGY FROM ',1PG12.5,' ',A,
     1            ' TO',G12.5,' ',A,' IN STEPS OF ',G12.5,' ',A/
     2            '  CONVERGENCE WILL NOT BE ATTEMPTED')
        ELSE
          WRITE(6,1350) NODMIN,NODMAX,EMIN/EUNIT,EMAX/EUNIT,EUNAME
 1350     FORMAT(/'  PROGRAM WILL SEEK STATES WITH NODE COUNTS FROM',
     1            I5,' TO',I7/'  LYING IN ENERGY RANGE ',1PG12.5,
     2            ' TO ',G12.5,1X,A)
        ENDIF

        CALL EREFIN(MONQN,NQN,NJLQN(ITYP),EUNAME,EREF,EUNIT)
C
      ENDIF
C
      CALL GCLOCK(TITIME)
      TTIME=TITIME-TFIRST
      TIMLST=TITIME

      IF (IPRINT.GE.1) THEN
        WRITE(6,1060)
        IF (JTOTL.LT.JTOTU) THEN
          WRITE(6,1500) JTOTL,JTOTU,JSTEP
        ELSE
          WRITE(6,1510) JTOTL
        ENDIF
 1500   FORMAT(/'  TOTAL ANGULAR MOMENTUM JTOT RUNS FROM',I4,'  TO',
     1          I6,'  IN STEPS OF',I4)
 1510   FORMAT(/'  TOTAL ANGULAR MOMENTUM JTOT =',I4)
      ENDIF
C
C  INCORPORATING POSSIBILITY OF LOOPING FROM IBFIX TO IBHI CRLS 25-07-18
      IF (IPRINT.GE.1 .AND. MXPAR.GT.1)
     1  WRITE(6,'(/2X,A,I3,A)') 'EACH JTOT IS SPLIT INTO A MAXIMUM OF ',
     1                          MXPAR,' SYMMETRY BLOCKS'
      IF (IBFIX.GT.0 .AND. IBHI.GT.0 .AND. IBHI.LT.IBFIX) IBHI=0
      IF (IBFIX.GT.0 .AND. IBHI.LE.0) IBHI=IBFIX
      IF (IBFIX.EQ.0) IBHI=MXPAR
      IF (IBFIX.GT.0 .AND. IPRINT.GE.1) THEN
        IF (IBFIX.LT.IBHI) THEN
          WRITE(6,1600) IBFIX,IBHI
        ELSE
          WRITE(6,1610) IBFIX
        ENDIF
      ENDIF
 1600 FORMAT(/'  CALCULATIONS WILL BE FOR SYMMETRY BLOCKS',
     1       I4,'  TO',I4)
 1610 FORMAT(/'  CALCULATIONS WILL BE FOR SYMMETRY BLOCK',
     1       I4,'  ONLY')

      IF (IPRINT.GE.1) WRITE(6,1900) TTIME,NUSED
 1900 FORMAT(/'  INITIALIZATION DONE.  TIME WAS',F7.2,' CPU SECS.',
     1       I10,' WORDS OF STORAGE USED.')
C
C
C  **************  LOOP OVER JTOT BEGINS HERE.  ******************
C
      IF (IPRINT.GE.1) WRITE(6,'(/1X,A)') TRIM(LABL)
      DO 100 JTOT=JTOTL,JTOTU,JSTEP
        THETA=THETLW+THETST*DBLE(JTOT)
C
C  ***************  LOOP OVER SYMMETRY BLOCKS BEGINS HERE  **************
C
        DO 200 IB=MAX(1,IBFIX),MIN(IBHI,MXPAR)

          IF (IPRINT.GE.1) WRITE(6,2100) JTOT,IB
 2100     FORMAT(/2X,29('*'),'  ANGULAR MOMENTUM JTOT  =',I4,'  ',
     1           ' AND SYMMETRY BLOCK  = ',I4,2X,28('*'))

          PHI=PHILW+PHIST*DBLE(IB-1)
          IVLU=IVLSAV
C
C  CHOOSE BASIS FUNCTIONS
C
          CALL BASE(JTOT,X(IXJSTT),N,X,X,CM2RU,
     1              X,X,X,X,MXLAM,NHAM,
     2              X(ILAM),X,WGHT,IEXCH,THETA,PHI,IB,
     3              .TRUE.,EBAS,NSTATE,IPRINT,IBOUND,X(ISJSTT),
     4              X)
C
C  N IS THE NUMBER OF BASIS FUNCTIONS
C  SKIP THIS JTOT,IB IF NO CHANNELS
C
          IF (N.LE.0) GOTO 200
          NSQ = N*N
C
C  ALLOCATE STORAGE FOR COUPLED EQUATION SOLVER.
C
C  ALLOCATE STORAGE COMMON TO ALL PROPAGATORS. . .
          ISJIND=IC1                 ! JSINDX
          ISEINT=ISJIND+N            ! EINT
          ISCENT=ISEINT+N            ! CENT
          ISWVEC=ISCENT+N            ! WVEC
          ISL=ISWVEC+N               ! L
          ISP=ISL+N                  ! P
          IPDIM=MXLAM+NCONST+NRSQ
          ISIV=ISP+IPDIM             ! IV
          IF (NUMDER .AND. IPRINT.GE.23 .AND.
     1                                   (IPROPS.EQ.7 .OR. IPROPL.EQ.7))
     2      ISIV=ISIV+2*IPDIM
          NV=N*(N+1)/2
          IF (IVLU.EQ.0) NV=NV*NVLBLK
          ISVL=ISIV                  ! VL
          IF (IVLFL.GT.0) ISVL=ISIV+(NV+NIPR-1)/NIPR
          ISDGVL=ISVL+NV             ! DGVL
          IXNEXT=ISDGVL
          IF (NCONST.EQ.0) IXNEXT=IXNEXT+N*NDGVL

          CALL CHKSTR(NUSED)
C
C  SET UP BASIS FUNCTIONS IN ALLOCATED STORAGE
C
          CALL BASE(JTOT,X(IXJSTT),N,X(ISJIND),X(ISL),CM2RU,
     1              X(ISEINT),X(ISCENT),X(ISVL),X(ISIV),MXLAM,NHAM,
     2              X(ILAM),X(ISWVEC),WGHT,IEXCH,THETA,PHI,IB,
     3              .FALSE.,EBAS,NSTATE,IPRINT,IBOUND,X(ISJSTT),
     4              X(ISDGVL))
C
C  LOOP OVER EXTERNAL FIELDS (NOT USED BY DEFAULT)
C
          OLDFAC=0.0D0
C
C  ******************  LOOP OVER FIELDS BEGINS HERE  ******************
C
          DO 300 IFLD=1,NFIELD
            CALL SETEFV(FIELD,FLDNOW)
            IF (IPRINT.GE.1) THEN
              IF (IPRINT.GE.2 .AND. IFLD.GT.1) WRITE(6,2300)
 2300         FORMAT(2X,59('= '))
              IF (LENEFV.GT.0) CALL MSGEFV(IFLD,NFIELD)
            ENDIF
C
C  CHECK THAT RMAX IS BEYOND CENTRIFUGAL BARRIER
            IF (RCTRCT.GT.0.0D0) THEN
              ITW=IXNEXT     ! W
              ITT=ITW+NSQ    ! T
              IXNEXT=ITT+NSQ
              CALL CHKSTR(NUSED)
              ECTRED=ECTRCT*CM2RU
              CALL CNTRCT(N,MCTRCT,RCTRCT,ECTRED,X(ITW),X(ITT),
     1                    X(ISVL),X(ISIV),X(ISEINT),X(ISCENT),
     2                    X(ISP),EP2RU,CM2RU,RSCALE,MXLAM,NHAM,IPRINT)
              N=MCTRCT
            ENDIF
C
C  CALCULATE STORAGE ALLOCATIONS FOR Y(OUT), Y(IN) AND U
C
            ISYOUT=IXNEXT        ! Y(OUT)
            ISYIN=ISYOUT+NSQ     ! Y(IN)
            ISU=ISYIN+NSQ        ! U
            IXNEXT=ISU+NSQ

            CALL CHKSTR(NUSED)
C
C  FOR CASES WHERE THE HAMILTONIAN IS DIAGONAL AT INFINITY, BUT THE INTERACTION
C  ENERGY IS DEPENDENT ON EFVS, CHEINT WILL SHIFT THE VALUES IN EINT
C
            IPERTN=0
            IF (NCONST.EQ.0 .AND. NDGVL.GT.0) THEN
              CALL CHEINT(X(ISEINT),X(ISDGVL),N,OLDFAC,CM2RU)
              IF (IPRINT.GE.6) CALL THRLST(N,X(ISEINT),X(ISCENT),CM2RU,
     1                                     X(ISL),IBOUND,EUNIT,EUNAME)
            ENDIF
C
C  FOR CASES WHERE THE HAMILTONIAN CONTAINS OFF-DIAGONAL TERMS
C  AT INFINITY, YTRANS PROVIDES A CONVENIENT WAY TO GET EINT
C
            IF (NCONST.GT.0 .OR. NRSQ.GT.0) THEN
              CALL YTRANS(X(ISYOUT),X(ISU),X(ISEINT),X(ISWVEC),
     1                    X(ISJIND),X(ISL),N,X(ISP),X(ISVL),X(ISIV),
     2                    MXLAM,NHAM,ERED,EP2RU,CM2RU,DEGTOL,
     3                    NOPEN,IBOUND,X(ISCENT),IPRINT,.FALSE.)
C
              IF (IPRINT.GE.6) CALL THRLST(N,X(ISEINT),X(ISCENT),CM2RU,
     1                                     X(ISL),IBOUND,EUNIT,EUNAME)
            ENDIF
C
            IREAD=.FALSE.
            IWRITE=ISCRU.GT.0
            IF (IWRITE) THEN
              OPEN(ISCRU,STATUS='SCRATCH',FORM='UNFORMATTED')
              IF (IPRINT.GE.1)
     1          WRITE(6,*) ' SCRATCH FILE OPENED ON UNIT ',ISCRU
            ENDIF
C
C  CALCULATE EREF
C
            IF (IREF.NE.0 .OR. MONQN(1).NE.-99999) THEN
              CALL THRESH(X(ISEINT),N,CM2RU,ITYPE,MONQN,NQN,
     1                    NJLQN(ITYP),EREF,X(ISJIND),IPRINT)
            ENDIF
            EMINB=EMIN+EREF
            EMAXB=EMAX+EREF
            ERED=EMAXB*CM2RU
            EREDMX=ERED
            IF (IPRINT.GE.3) CALL PREREF(EREF,EUNIT,EUNAME)
            CAYS=CALCK(EPS*CM2RU,EMAXB,X(ISEINT),N)
            IF (STEPS.GT.0.D0 .AND. CAYS.EQ.0.D0) THEN
              WRITE(6,*) ' *** ERROR: EKIN+EPS IS NOT +VE'
              STOP
            ENDIF
            CAYL=CALCK(EPL*CM2RU,EMAXB,X(ISEINT),N)
            IF (STEPL.GT.0.D0 .AND. CAYL.EQ.0.D0) THEN
              WRITE(6,*) ' *** ERROR: EKIN+EPL IS NOT +VE'
              STOP
            ENDIF

            IF (IRMSET.GT.0 .AND. IFLD.EQ.1) THEN
              RMNINT=RMIN
              ITW=IXNEXT
              IT1=ITW+N*N
              IT2=IT1+N
              IT3=IT2+N
              IT4=IT3+N
              IXNEXT=IT4+N
              CALL CHKSTR(NUSED)
              CALL FINDRM(X(ITW),N,RMNINT,RTURN,X(ISP),X(ISVL),
     1                    X(ISIV),ERED,X(ISEINT),X(ISCENT),
     2                    X(IT1),X(IT2),X(IT3),X(IT4),MXLAM,NHAM,
     3                    EP2RU,CM2RU,RSCALE,IRMSET,ITYPE,IPRINT)
              IXNEXT=ITW
            ENDIF
C
C  ******************  LOOP OVER ENERGIES BEGINS HERE  ******************
C
C
C  ALLOCATE STORAGE USED FOR EIGENVECTORS OF SMALLEST EIGENVALUE AT
C  EMIN AND EMAX
            ISLOW=IXNEXT    ! EVEC AT EMIN
            ISHIGH=ISLOW+N  ! EVEC AT EMAX
            IC2=ISHIGH+N
            IXNEXT=IC2
            CALL CHKSTR(NUSED)

C  ISEVEC IS A POINTER TO WHERE THE EIGENVECTOR OF THE SMALLEST
C  EIGENVALUE FOR THE CURRENT CALCULATION IS STORED
            ISEVEC=ISLOW
            DO 400 INRG=1,NNRG
              IF (INRG.EQ.2 .AND. .NOT.LESCAN) ISEVEC=ISHIGH
              IF (.NOT.LESCAN) THEN
                IF (INRG.EQ.1) ENERGY=EMAX
                IF (INRG.EQ.2) ENERGY=EMIN
                IF (INRG.GT.2) EXIT
              ELSE
                ENERGY=EMIN+DNRG*DBLE(INRG-1)
              ENDIF
              ENERB=ENERGY+EREF
              ERED=ENERB*CM2RU
              SVVAL=ENERGY/EUNIT
              IF (.NOT.LESCAN) THEN
                IF (IPRINT.GE.7) CALL PRPROP(SVNAME,SVVAL,SVUNIT)
              ELSE
                IF (IPRINT.GE.1) CALL PRPRCT(INRG,SVNAME,SVVAL,SVUNIT)
              ENDIF
              IF (IPRINT.GE.8) CALL PREABS(ENERB,EREF,EUNIT,SVUNIT)

              CALL BDCTRL(N, MXLAM, NHAM, X(ISYOUT), X(ISYIN),
     1                    X(ISU), X(ISEVEC), X(IDUM), X(ISVL), X(ISIV),
     2                    X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                    EP2RU, CM2RU, RSCALE, EIGMIN, .FALSE.,
     4                    IMIN, IPRINT)
              IF (LESCAN .AND. IPRINT.GE.1) CALL PREVAL(NODE,EIGMIN)
C
              CALL GCLOCK(TITIME)
              TTIME=TITIME-TIMLST
              TIMLST=TITIME
C
              CALL FLUSH(6)

              IF (INRG.EQ.1) THEN
                IF (NODE.EQ.0) THEN
                  IF (IPRINT.GE.2) WRITE(6,2400) EMAX/EUNIT,TRIM(EUNAME)
 2400             FORMAT(/'  NO NODES FOUND AT EMAX = ',1PG17.10,1X,A,
     1                   '. END SEARCH.')
                  GOTO 300
                ENDIF
                NODHI=NODE
                EIGHIG=EIGMIN
                IHIGH=IMIN
              ELSE
                NODLO=NODE
                EIGLOW=EIGMIN
                ILOW=IMIN
              ENDIF
C
              IF ((INRG.EQ.2 .AND. .NOT.LESCAN) .AND. IPRINT.GE.2)
     1          CALL PRMNMX(NODLO,NODHI,EMIN/EUNIT,EMAX/EUNIT,SVNAME,
     2                      SVUNIT)

              NCALC=NCALC+1
              NFOUND=0
              IF (NCALC.GE.MXCALC) GOTO 390
  400       CONTINUE

            IF (LESCAN) GOTO 300
C
            IREAD=IWRITE
            IWRITE=.FALSE.

            NBDST=MIN(NODHI-NODLO,MXNODE)
            IF (NODHI.EQ.NODLO) THEN
              IF (IPRINT.GE.3)
     1          WRITE(6,2410)
 2410         FORMAT(/'  NO NODES BETWEEN EMIN AND EMAX.'/
     1               '  CONVERGENCE WILL BE SKIPPED FOR THIS JTOT AND ',
     2               'SYMMETRY BLOCK.')
            ENDIF
C
C  ALLOCATE STORAGE FOR EIGENVECTORS OF SMALLEST EIGENVALUE AT RANGE
C  ENDPOINTS FOR EACH NODE
C
            ISVLO=IC2            ! EVEC AT ELO
            ISVHI=ISVLO+NBDST*N  ! EVEC AT EHI
            IXNEXT=ISVHI+NBDST*N
            IC3=IXNEXT
            CALL CHKSTR(NUSED)

C
C  LOOP OVER ALL NODES, SETTING UP INITIAL VALUES FOR RANGE ENDPOINTS
C
            DO I=1,NBDST
C
C  IVLO AND IVHI ARE ADDRESSES FOR EVEC AT ELO AND EHI FOR CURRENT NODE
C
              IVLO=ISVLO+(I-1)*N
              IVHI=ISVHI+(I-1)*N

              ELO(I)=EMINB
              NLO(I)=NODLO
              EIGLO(I)=EIGLOW
              ILO(I)=ILOW
              CALL DCOPY(N,X(ISLOW),1,X(IVLO),1)
              EHI(I)=EMAXB
              NHI(I)=NODHI
              EIGHI(I)=EIGHIG
              IHI(I)=IHIGH
              CALL DCOPY(N,X(ISHIGH),1,X(IVHI),1)
            ENDDO
C
C  ***************  LOOP OVER NODES BEGINS HERE  ************************
C
C  FROM NOW ON, THE CLOSEST AVAILABLE BOUNDS ON THE ENERGY OF NODE
C  NUMBER NODE WILL BE STORED IN EHI(NODE-NODLO) AND ELO(NODE-NODLO).
C
cINOLLS include 'bound/pvmdat7.f'
C
            DO 500 IBDST=1,NBDST
              NPROP=1
              TNTIME=TITIME
              NSEEK=IBDST+NODLO
              IF (NSEEK.LT.NODMIN .OR. NSEEK.GT.NODMAX) GOTO 500
              IF (IPRINT.GE.2) CALL PRNDCT(NSEEK)
C
cINOLLS include 'all/pvmdat5.f'
C
C  START BISECTION TO FIND THIS NODE
C
  510         EHALF=0.5D0*(ELO(IBDST)+EHI(IBDST))
              NCALC=NCALC+1
              IF (NCALC.GT.MXCALC) THEN
                NFOUND=IBDST-1
                GOTO 390
              ENDIF
              SVMIN=(ELO(IBDST)-EREF)/EUNIT
              SVMAX=(EHI(IBDST)-EREF)/EUNIT
              SVVAL=(EHALF-EREF)/EUNIT

              IF (IPRINT.GE.7) CALL PRBIS(SVMIN,SVMAX,SVVAL,SVUNIT,
     1                                    'BISECTION')
              IF (IPRINT.GE.8) CALL PREABS(EHALF,EREF,EUNIT,SVUNIT)
              ERED=EHALF*CM2RU
              IF (IPRINT.GE.6) CALL PRPRCT(NPROP,SVNAME,SVVAL,SVUNIT)

              CALL BDCTRL(N, MXLAM, NHAM, X(ISYOUT), X(ISYIN),
     1                    X(ISU), X(ISEVEC), X(IDUM), X(ISVL), X(ISIV),
     2                    X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                    EP2RU, CM2RU, RSCALE, EIGMIN, .FALSE.,
     4                    IMIN, IPRINT)

              IF (IPRINT.GE.7) CALL PREVAL(NODE,EIGMIN)
              NPROP=NPROP+1
C
              CALL GCLOCK(TITIME)
              TTIME=TITIME-TIMLST
              TIMLST=TITIME
C
              CALL FLUSH(6)
C
C  LOOP OVER THIS NODE AND THE REST, UPDATING INITIAL VALUES FOR RANGE
C  ENDPOINTS
              DO I=IBDST,NBDST
                IVLO=ISVLO+(I-1)*N
                IVHI=ISVHI+(I-1)*N
                IF (NODE.GE.NODLO+I) THEN
                  IF (EHALF.LT.EHI(I)) THEN
                    EHI(I)=EHALF
                    NHI(I)=NODE
                    EIGHI(I)=EIGMIN
                    IHI(I)=IMIN
                    CALL DCOPY(N,X(ISEVEC),1,X(IVHI),1)
                  ENDIF
                ELSE
                  IF (EHALF.GT.ELO(I)) THEN
                    ELO(I)=EHALF
                    NLO(I)=NODE
                    EIGLO(I)=EIGMIN
                    ILO(I)=IMIN
                    CALL DCOPY(N,X(ISEVEC),1,X(IVLO),1)
                  ENDIF
                ENDIF
              ENDDO
C
              IF (NHI(IBDST)-NLO(IBDST).GT.1) GOTO 510
C
              IF (NHI(IBDST).LE.NLO(IBDST)) THEN
                WRITE(6,2500) NSEEK,IBDST,
     1                       (NLO(I),ELO(I),NHI(I),EHI(I),I=1,NBDST)
 2500           FORMAT(/'  ERROR IN NODE COUNT LOGIC.'/
     1                 '  CURRENTLY SEARCHING FOR BOUND STATE',I4,
     2                 ' (INDEX NUMBER',I3,')'/
     3                 '  NLO       ELO         NHI      EHI'/
     4                 (2(I5,F16.5)))
                STOP
              ENDIF
C
C  ARRIVE HERE IF ONLY THE REQUIRED NODE LIES IN THIS INTERVAL.
C  DECIDE WHETHER TO USE VWDB METHOD OR CONTINUE BISECTION.
C
C  ONLY SAFE TO USE VWDB METHOD IF WE ARE ON THE CORRECT BRANCH
C  OF THE MATCHING EIGENVALUE. IT SHOULD BE SAFE TO WAIT UNTIL
C  THE EIGENVALUES WITH THE SMALLEST ABSOLUTE VALUES ARE BOTH
C  OF THE CORRECT SIGN.
C
C  PROBLEMS SOMETIMES ARISE BECAUSE THE NODE COUNT CHANGES AT
C  AN ENERGY SLIGHTLY AWAY FROM THE ZERO IN THE EIGENVALUE.
C  AVOID FURTHER BISECTION IF EHI AND ELO ARE TOO CLOSE
C
              IF ((EIGHI(IBDST).GT.0.0D0 .OR. EIGLO(IBDST).LT.0.0D0)
     1            .AND.
     2            EHI(IBDST)-ELO(IBDST).GT.100.0D0*DTOL) GOTO 510
C
C  START THE VWDB METHOD WITH A POINT EITHER SIDE
C
              IF (EIGHI(IBDST)*EIGLO(IBDST).GE.0.0D0) THEN
                IF (EHI(IBDST)-ELO(IBDST).GT.100.0D0*DTOL) GOTO 510
                WRITE(6,*) ' *** BISECTION TO FIND EIGENVALUE '//
     1                     'CROSSING ZERO IN MATCHING MATRIX FOR '//
     2                     'BOUND STATE',IBDST,'HAS FAILED'
                IF (IPRINT.GE.8) THEN
                  WRITE(6,*) ' LATEST VALUES FOR ENERGIES AND ',
     1                       'EIGENVALUES ARE',ELO(IBDST),EIGLO(IBDST),
     2                                         EHI(IBDST),EIGHI(IBDST)
                ENDIF
                GOTO 500
              ENDIF
C
C  EIGENVECTOR FOR SMALLEST EIGENVALUE IN CURRENT SEARCH IS STORED AT
C  POSITION IVSMLL (WHICH IS THE SAME AS IVLO - EVECS AT RANGE ENDPOINTS
C  NO LONGER NEEDED FOR THE CURRENT NODE)
C
              IVSMLL=ISVLO+(IBDST-1)*N
              IF (ABS(EIGHI(IBDST)).LT.ABS(EIGLO(IBDST))) THEN
                ENOW=EHI(IBDST)
                EIGNOW=EIGHI(IBDST)
                ESMALL=EIGNOW
                ISMALL=IHI(IBDST)
                IVHI=ISVHI+(IBDST-1)*N
                CALL DCOPY(N,X(IVHI),1,X(IVSMLL),1)
                ELST=ELO(IBDST)
                EIGLST=EIGLO(IBDST)
              ELSE
                ENOW=ELO(IBDST)
                EIGNOW=EIGLO(IBDST)
                ESMALL=EIGNOW
                ISMALL=ILO(IBDST)
                ELST=EHI(IBDST)
                EIGLST=EIGHI(IBDST)
              ENDIF

              IF (IPRINT.GE.7) CALL PRBEND('VWDB METHOD')

              DLAST=1.0D30
C
              XA=ELST
              XC=XA
              XB=ENOW
              FA=EIGLST
              FB=EIGNOW
              FC=FA
              SV1=(XA-EREF)/EUNIT
              SV2=(XB-EREF)/EUNIT
              IF (IPRINT.GE.7) CALL PRVWST(SV1,SV2,FA,FB,SVUNIT)

              CONVGE=.FALSE.
              ENOISE=.FALSE.
              DO 600 ITER=1,NITER
C
C  CALCULATE THE NEXT ENERGY USING THE VWDB ALGORITHM
C
                SV1=(XA-EREF)/EUNIT
                SV2=(XB-EREF)/EUNIT
                SV3=(XC-EREF)/EUNIT
                ENEW=BRENT(XA,XB,XC,FA,FB,FC,ITER.EQ.1,DTOL,
     1                     CONVGE,METHOD)
                SVVAL=(ENEW-EREF)/EUNIT
                IF (IPRINT.GE.7) CALL PRVWDB(SV1,SV2,SV3,SVNAME,SVUNIT,
     1                                       METHOD,SVVAL)
                DE=ENEW-XB
C
                NCALC=NCALC+1
                IF (NCALC.GT.MXCALC) THEN
                  NFOUND=IBDST-1
                  GOTO 390
                ENDIF

                ERED=ENEW*CM2RU
                IF (IPRINT.GE.8) CALL PREABS(ENEW,EREF,EUNIT,SVUNIT)
                IF (CONVGE) EXIT

                IF (IPRINT.GE.6) CALL PRPRCT(NPROP,SVNAME,SVVAL,SVUNIT)

                CALL BDCTRL(N, MXLAM, NHAM, X(ISYOUT), X(ISYIN),
     1                      X(ISU), X(ISEVEC),X(IDUM), X(ISVL), X(ISIV),
     2                      X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                      EP2RU, CM2RU, RSCALE, EIGMIN, .FALSE.,
     4                      IMIN, IPRINT)

                IF (ABS(EIGMIN).LT.ABS(ESMALL)) THEN
C  UPDATE SMALLEST EIGENVALUE, EIGENVECTOR OF SMALLEST EIGENVALUE AND
C  INDEX
                  ESMALL=EIGMIN
                  ISMALL=IMIN
                  CALL DCOPY(N,X(ISEVEC),1,X(IVSMLL),1)
                ENDIF

                IF (IPRINT.GE.7) CALL PREVAL(NODE,EIGMIN)
                NPROP=NPROP+1
C
                CALL GCLOCK(TITIME)
                TTIME=TITIME-TIMLST
                TIMLST=TITIME
C
                CALL FLUSH(6)

                IF (EIGMIN*FA.GT.0.D0) THEN
                  FCOMP=FA
                ELSE
                  FCOMP=FB
                ENDIF
                IF (ABS(EIGMIN).GT.ABS(FCOMP)) THEN
                  ENOISE=.TRUE.
                  IF (ABS(FA).LT.ABS(FB)) THEN
                    FSMALL=FA
                    XSMALL=(XA-EREF)/EUNIT
                  ELSE
                    FSMALL=FB
                    XSMALL=(XB-EREF)/EUNIT
                  ENDIF
                  EXIT
                ENDIF
C
C  SET UP FOR NEXT CYCLE OF BRENT ALGORITHM
C  (CONTRAPOINT (XA,FA) AND CURRENT ITERATE (XB,FB) MUST BRACKET THE ROOT)
                IF (FA*EIGMIN.LT.0.D0) THEN
                  XB=ENEW
                  FB=EIGMIN
                ELSE
                  XA=ENEW
                  FA=EIGMIN
                ENDIF
C
  600         CONTINUE

              IF (.NOT.CONVGE) THEN
                WRITE(6,*) ' BOUND STATE',IBDST,'NOT CONVERGED IN',
     1                     NITER,'ITERATIONS'
              ENDIF
C
              ZCNTN=(ENEW.LE.EHI(IBDST) .AND. ENEW.GE.ELO(IBDST))
              ECM=ENEW-EREF

              IF (IBDSUM.GT.0)
     1          CALL OUTEFV(NSEEK,ECM,EUNIT,EUNAME,NODE,ZCNTN,CONVGE,
     2                      ENOISE,IBDSUM)
              IF (IPRINT.GE.1) THEN
                IF (ENOISE) THEN
                  CALL PRINCR(SVVAL,SVUNIT,METHOD,EIGMIN,NSEEK,
     1                        FSMALL,XSMALL,CONVGE)
                ELSE
                  CALL PRCONV(NSEEK,SVNAME,SVVAL,SVUNIT,NODE,ZCNTN,
     1                        CONVGE,METHOD)
                ENDIF
              ENDIF
              IF (IPRINT.GE.6) CALL PRLAST(DE/EUNIT,SVUNIT)
              IF (IPRINT.GE.8) CALL PRLOC(TITIME-TNTIME)
C
              EVAL(IBDST,1)=ENEW
C
cINOLLS include 'bound/pvmdat8-v15.f'
C
              NCHECK(IBDST)=NSEEK
C
              IF (WAVE) THEN
                CALL WVINFO(JTOT,IB,NSEEK,N,NQN,NSTATE,X(IXJSTT),
     1                      X(ISJIND),X(ISL),X(ISCENT),ENEW,EREF,
     2                      EUNIT,EUNAME,IBOUND,IPRINT)
              ENDIF
              IF (IPRINT.GE.5 .OR. WAVE) THEN
                CALL EVMTCH(X(IVSMLL),ESMALL,ISMALL,X(IXJSTT),X(ISL),
     2                      X(ISJIND),N,NSTATE,NQN,IPRINT)
              ENDIF
C  END OF BOUND-STATE LOCATION SECTION
C ===========================================================================
C
C  IF WAVEFUNCTIONS REQUIRED DO A FINAL PROPAGATION TO SAVE
C  NECESSARY INFORMATION FOR BACK-SUBSTITUTION
C
              IF (WAVE) THEN
C
C  WRITE OUT HEADER FOR THIS WAVEFN
C
                IF (IPRINT.GE.11) WRITE(6,2580) IPSISC
 2580           FORMAT(/'  WAVEFUNCTIONS REQUESTED. FINAL PROPAGATION ',
     1                 'WILL WRITE OUT INFORMATION ON CHANNEL ',I3)
                IREAD=IWRITE
                IWRITE=.FALSE.
C
C  ALLOCATE STORAGE FOR SUMPSI
                ITSUMP=IC3          ! SUMPSI
                IXNEXT=ITSUMP+N
                CALL CHKSTR(NUSED)

                CALL BDCTRL(N, MXLAM, NHAM, X(ISYOUT), X(ISYIN),
     1                      X(ISU),X(ISEVEC),X(ITSUMP),X(ISVL),X(ISIV),
     2                      X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                      EP2RU, CM2RU, RSCALE, EIGMIN, .TRUE.,
     4                      IMIN, IPRINT)
C
                CALL GCLOCK(TITIME)
                TTIME=TITIME-TIMLST
                TIMLST=TITIME
                IXNEXT=IC3
              ENDIF
C
  500       CONTINUE
C
C  RELEASE STORAGE USED FOR STORING EIGENVECTORS OF SMALLEST EIGENVALUES
            IXNEXT=IC2
C
  390       IF (NCALC.GE.MXCALC) THEN
              NBDST=NFOUND
              IF (IPRINT.GE.1) WRITE(6,2390) MXCALC,NFOUND
 2390         FORMAT(/'  *** WARNING. MXCALC =',I5,' REACHED AFTER ONLY'
     1               ,I5,' NODES FOUND.')
            ENDIF
C
C  END OF WAVEFUNCTION CALCULATION
C ============================================================================
C
C  NOW CALCULATE EXPECTATION VALUES OR DO CONVERGENCE TESTING.
C  USE STORED EIGENVALUES AS STARTING POINT FOR VWDB METHOD.
C
            ISTOR=1
C
C  CYCLE THROUGH PERTURBATIONS (IPERT=0 CORRESPONDS TO ENERGIES THEMSELVES)
            DO 5100 IPERT=0,NPERT
C
            IF (IPERT.EQ.0) THEN
              IPERTN=0
              EREFP(IPERT)=EREF
            ELSE
              IPERTN=IPPERT(IPERT)
              NPOWN=NPOW(IPERT)
              DELTAN=DELTA(IPERT)
              IF (IPERTN.GT.0 .AND. IPERTN.LE.MXLAM)
     1          DELTAN=DELTAN*EUNIT/EP2CM
              IF (IPRINT.GE.1) WRITE(6,6100) IPERTN,NPOWN,DELTA(IPERT)
 6100         FORMAT(/2X,59('==')/'  CALCULATE EXPECTATION VALUES ',
     1               'OF POTENTIAL(',I2,')/R**',I2,' WITH DELTA = ',
     2               1PE10.3)
C
C  FOR CASES WHERE THE HAMILTONIAN IS DIAGONAL AT INFINITY, BUT THE INTERACTION
C  ENERGY IS DEPENDENT ON EFVS, CHEINT WILL SHIFT THE VALUES IN EINT
C
            IF (NCONST.EQ.0 .AND. NDGVL.GT.0) THEN
              CALL CHEINT(X(ISEINT),X(ISDGVL),N,OLDFAC,CM2RU)
              IF (IPRINT.GE.6) CALL THRLST(N,X(ISEINT),X(ISCENT),CM2RU,
     1                                     X(ISL),IBOUND,EUNIT,EUNAME)
            ENDIF
              IF (NCONST.GT.0) THEN
                CALL YTRANS(X(ISYOUT),X(ISU),X(ISEINT),X(ISWVEC),
     1                      X(ISJIND),X(ISL),N,X(ISP),X(ISVL),X(ISIV),
     2                      MXLAM,NHAM,ERED,EP2RU,CM2RU,DEGTOL,
     3                      NOPEN,IBOUND,X(ISCENT),IPRINT,.FALSE.)
C
                IF (IPRINT.GE.6) CALL THRLST(N,X(ISEINT),X(ISCENT),
     1                      CM2RU, X(ISL),IBOUND,EUNIT,EUNAME)
              ENDIF
C
              IREAD=.FALSE.
              IWRITE=ISCRU.GT.0
C
C  CALCULATE EREF, SHIFTED BY THE PERTURBATION IF APPROPRIATE
C
              IF (IREF.NE.0 .OR. MONQN(1).NE.-99999) THEN
                CALL THRESH(X(ISEINT),N,CM2RU,ITYPE,MONQN,NQN,
     1                    NJLQN(ITYP),EREFIP,X(ISJIND),IPRINT)
              ENDIF
              EREFP(IPERT)=EREFIP
              IF (IPRINT.GE.3. AND. EREFIP.NE.EREF)
     1            CALL PREREF(EREFIP,EUNIT,EUNAME)
            ENDIF
C
            DRSSTR=DRS
            DRLSTR=DRL
            RMNSTR=RMNINT
            RMXSTR=RMXINT
C
C  CYCLE THROUGH CONVERGENCE TESTS (ICONV=0 CORRESPONDS TO ORIGINAL
C  CALCULATIONS)
              DO 5200 ICONV=0,NCONV
                IF (IPERT.EQ.0 .AND. ICONV.EQ.0) GOTO 5200
                ISTOR=ISTOR+1
C
                IF (ICONV.GT.0 .AND. NBDST.GT.0) THEN
                  IF (ICON.EQ.1) THEN
                    FAC=2D0
                    DRS=DRS*FAC
                    IF (DRL.NE.unset) THEN
                      DRL=DRL*FAC
                      IF (IPRINT.GE.1) WRITE(6,6200) 'DR',DRS,DRL
                    ELSE
                      IF (IPRINT.GE.1) WRITE(6,6200) 'DRS',DRS
                    ENDIF
                  ELSEIF (ICON.EQ.2) THEN
                    RMXINT=RMXINT-DRCON
                    IF (IPRINT.GE.1) WRITE(6,6200) 'RMAX',RMXINT
                  ELSEIF (ICON.EQ.3) THEN
                    RMNINT=RMNINT+DRCON
                    IF (IPRINT.GE.1) WRITE(6,6200) 'RMIN',RMNINT
                  ELSE
                    WRITE(6,*) ' *** ERROR. ICON =',ICON,
     1                         ' NOT IMPLEMENTED.'
                    STOP
                  ENDIF
                ENDIF
C
 6200           FORMAT(/2X,59('--')/'  TESTING CONVERGENCE OF ',
     1                 'PROPAGATION PARAMETERS: ',A,' CHANGED TO ',
     2                 1PG13.5,:' & ',G13.5)
C
cINOLLS include 'bound/pvmdat10.f'
C
C  BEGINNING OF LOOP FOR PERTURBATION CALCULATIONS / CONVERGENCE TESTING
                DO 5500 IBDST=1,NBDST
                  NPROP=1
                  NSEEK=IBDST+NODLO
                  IF (NSEEK.LT.NODMIN .OR. NSEEK.GT.NODMAX) GOTO 5500
C
cINOLLS include 'bound/pvmdat6.f'
C
C  GET EIGMIN FOR THE NEW PROBLEM NEAR THE PREVIOUS EIGENVALUE
C
                  IREAD=.FALSE.
                  IWRITE=ISCRU.GT.0
C                 IF (IWRITE) REWIND ISCRU
                  DE=100.0D0*DTOL
                  ENOW=EVAL(IBDST,1)-DE
                  SVVAL=(ENOW-EREFP(IPERT))/EUNIT
                  IF (IPRINT.GE.7) CALL PRPROP(SVNAME,SVVAL,SVUNIT)
                  IF (IPRINT.GE.8) CALL PREABS(ENOW,EREFP(IPERT),
     1                                         EUNIT,SVUNIT)
                  ERED=ENOW*CM2RU
                  IF (IPRINT.GE.6) CALL PRPRCT(NPROP,
     1                            'STARTING VALUE OF E',SVVAL,SVUNIT)

                  CALL BDCTRL(N, MXLAM, NHAM, X(ISYOUT), X(ISYIN),
     1                        X(ISU),X(ISEVEC),X(IDUM),X(ISVL), X(ISIV),
     2                        X(ISEINT), X(ISCENT), X(ISP), NODE, ERED,
     3                        EP2RU, CM2RU, RSCALE, EIGMIN, .FALSE.,
     4                        IMIN, IPRINT)

                  IF (IPRINT.GE.7) CALL PREVAL(NODE,EIGMIN)
                  NPROP=NPROP+1
C
                  CALL GCLOCK(TITIME)
                  TTIME=TITIME-TIMLST
                  TIMLST=TITIME
C
C  SET UP A FAKE PREVIOUS POINT TO GET THE VWDB METHOD STARTED
C  WITH THE NEXT POINT AT EXACTLY THE PREVIOUS EIGENVALUE
C
                  EIGNOW=EIGMIN
                  ELST=ENOW+DE
                  EIGLST=0.0D0
C
                  IREAD=IWRITE
                  IWRITE=.FALSE.
                  EIGNOW=EIGMIN
                  CONVGE=.FALSE.
                  METHOD='SECANT      '
                  ZBRENT=.FALSE.
                  DO 5600 ITER=1,NITER

                    IF (EIGLST*EIGMIN.LT.0D0 .OR. ZBRENT) THEN
                      IF (.NOT.ZBRENT) THEN
                        XA=ELST
                        XB=ENOW
                        FA=EIGLST
                        FB=EIGNOW
                        FC=FA
                      ENDIF
C
C  EITHER CALCULATE THE NEXT ENERGY USING THE VWDB ALGORITHM
C
                      SV1=(XA-EREFP(IPERT))/EUNIT
                      SV2=(XB-EREFP(IPERT))/EUNIT
                      SV3=(XC-EREFP(IPERT))/EUNIT
                      ENEW=BRENT(XA,XB,XC,FA,FB,FC,.NOT.ZBRENT,DTOL,
     1                           CONVGE,METHOD)
                      SVVAL=(ENEW-EREFP(IPERT))/EUNIT
                      IF (IPRINT.GE.7) CALL PRVWDB(SV1,SV2,SV3,SVNAME,
     1                                             SVUNIT,METHOD,SVVAL)
                      ZBRENT=.TRUE.
                    ELSE
C
C  OR CALCULATE THE NEXT ENERGY USING SECANT
C
                      ENEW=ENOW-EIGNOW*(ENOW-ELST)/(EIGNOW-EIGLST)
                      IF (IPRINT.GE.7) THEN
                        SVMIN=(ELST-EREFP(IPERT))/EUNIT
                        SVMAX=(ENOW-EREFP(IPERT))/EUNIT
                        SVVAL=(ENEW-EREFP(IPERT))/EUNIT
                        CALL PRBIS(SVMIN,SVMAX,SVVAL,SVUNIT,'SECANT')
                      ENDIF
                      IF (ABS(ENEW-ENOW).LE.DTOL) CONVGE=.TRUE.
                    ENDIF
C
                    ERED=ENEW*CM2RU
                    SVVAL=(ENEW-EREFP(IPERT))/EUNIT
                    IF (IPRINT.GE.8)
     1                  CALL PREABS(ENEW,EREFP(IPERT),EUNIT,SVUNIT)
                    IF (IPRINT.GE.6) CALL PRPRCT(NPROP,SVNAME,SVVAL,
     1                                           SVUNIT)

                    CALL BDCTRL(N,MXLAM,NHAM,X(ISYOUT),X(ISYIN),
     1                          X(ISU),X(ISEVEC),X(IDUM),X(ISVL),
     2                          X(ISIV),
     2                          X(ISEINT),X(ISCENT),X(ISP),NODE,ERED,
     3                          EP2RU, CM2RU, RSCALE, EIGMIN,.FALSE.,
     4                          IMIN, IPRINT)

                    IF (IPRINT.GE.7) CALL PREVAL(NODE,EIGMIN)
                    NPROP=NPROP+1
C
                    CALL GCLOCK(TITIME)
                    TTIME=TITIME-TIMLST
                    TIMLST=TITIME
C
                    CALL FLUSH(6)
                    EIGLST=EIGNOW
                    IF (CONVGE) EXIT
C
C  SET UP FOR NEXT CYCLE OF BRENT ALGORITHM
C  (CONTRAPOINT (XA,FA) AND CURRENT ITERATE (XB,FB) MUST BRACKET THE ROOT)
                    IF (.NOT.ZBRENT) THEN
                      ELST=ENOW
                      ENOW=ENEW
                      EIGNOW=EIGMIN
                    ELSE
                      IF (FA*EIGMIN.LT.0.D0) THEN
                        XB=ENEW
                        FB=EIGMIN
                      ELSE
                        XA=ENEW
                        FA=EIGMIN
                      ENDIF
                    ENDIF
 5600             CONTINUE

                  IF (.NOT.CONVGE) THEN
                    IF (IPRINT.GE.1) WRITE(6,6500) ITER
 6500               FORMAT('  VWDB FAILS TO CONVERGE AFTER',I3,
     1                     ' ITERATIONS')
                    GOTO 5500
                  ENDIF
C
C  CHECK NODE COUNT
C  NOW BASED ON CURRENT NODE COUNT, NOT LAST
C
                  IF (EIGMIN.LE.0.0D0) THEN
                    NSEEK=NODE
                  ELSE
                    NSEEK=NODE+1
                  ENDIF
C
                  IF (NSEEK.NE.NCHECK(IBDST))
     1              WRITE(6,6510) NSEEK,NCHECK(IBDST)
 6510             FORMAT(/'  *** WARNING. THE FOLLOWING EIGENVALUE ',
     1                   'DOES NOT HAVE THE SAME NODE COUNT (',I5,')'/
     2                   6X,'AS THE REFERENCE CALCULATION',' (',I5,')'/
     3                   6X,'EXPECTATION VALUES AND CONVERGENCE ',
     4                   'TESTS MAY BE IN ERROR.'/6X,'A DIFFERENT ',
     5                   'VALUE OF RMATCH OR A SMALLER DR MAY AVOID ',
     6                   'THIS ISSUE.')
C
                  EVAL(IBDST,ISTOR)=ENEW
                  ERELP=ENEW-EREFP(IPERT)
                  IF (ICONV.EQ.0) THEN
C
C  CALCULATE EXPECTATION VALUE AND STORE IN EXTRAV FOR WRITING TO IBDSUM
C  IF NOT REPLACED BY IMPROVED VALUE FROM RICHARDSON EXTRAPOLATION
C
                    EXPV=(ENEW-EVAL(IBDST,1))/(DELTAN*EP2CM)
                    EXTRAV(IBDST,IPERT)=EXPV
C
C  LOGICAL TO INDICATE THAT THIS IPERT IS FOR AN EFV
                    LIPEFV=((NDGVL.GT.0 .AND. IPERTN.LT.0)
     1               .OR. (MAPEFV.GT.0 .AND. IPERTN.GE.MXLAM+MAPEFV
     1               .AND. IPERTN.LT.MXLAM+MAPEFV+NEFV))
     2               .AND. NPOWN.EQ.0
C
C  CALCULATE DERIVATIVES WITH RESPECT TO EFV
C  (ABSOLUTE AND RELATIVE TO THRESHOLD)
C
                    IF (LIPEFV) THEN
                      DEDBAB=(ENEW-EVAL(IBDST,1))/(DELTAN*EUNIT)
                      DEDBAT=(EREFP(IPERT)-EREF)/(DELTAN*EUNIT)
                      DEDBRL=DEDBAB-DEDBAT
                      EXTRAV(IBDST,IPERT)=DEDBRL
                    ENDIF
C
cINOLLS   include 'bound/pvmdat9.f'
C
                    IF (IPRINT.GE.1) THEN
                      IF (LIPEFV) THEN
C  IPERTN INDICATES AN EXTERNAL FIELD
                        IF (NDGVL.GT.0) THEN
                          I=-IPERTN
                        ELSE
                          I=IPERTN-MXLAM-MAPEFV+1
                        ENDIF
                        WRITE(6,7005) ERELP/EUNIT,TRIM(SVUNIT),NSEEK,
     1                                DEDBAB,
     2                                TRIM(SVUNIT),TRIM(EFVUNT(I)),
     3                                DEDBRL,
     4                                TRIM(SVUNIT),TRIM(EFVUNT(I))
 7005                   FORMAT(/1P,'  FINITE DIFFERENCE CALCULATION ',
     1                         'CONVERGED AT ',21X,'ENERGY = ',G17.10,
     2                         1X,A/'  GIVES DE/DFIELD FOR NODE',I5,
     3                         ':'/6X,G13.6,1X,A,'/',A,' (ABSOLUTE)'/
     4                         6X,G13.6,1X,A,'/',A,
     5                         ' (RELATIVE TO THRESHOLD)')
                      ELSE
C  IPERTN DOES NOT INDICATE AN EXTERNAL FIELD
                        WRITE(6,7010) ERELP/EUNIT,TRIM(SVUNIT),IPERTN,
     1                                NPOWN,NSEEK,EXPV
 7010                   FORMAT(/1P,'  FINITE DIFFERENCE CALCULATION ',
     1                         'CONVERGED AT ',21X,'ENERGY = ',G17.10,
     2                         1X,A/'  CALCULATED EXPECTATION VALUE ',
     3                         '<POT(',I2,')/R**',I2,'> FOR NODE',I5,
     4                         ' IS ',G13.6)
                        IF (FACTOR(IPERT).NE.1.0D0) THEN
                          FEXPV=FACTOR(IPERT)*EXPV
                          WRITE(6,7020) FACTOR(IPERT),FEXPV
 7020                     FORMAT('  MULTIPLIED BY FACTOR ',1PE12.5,22X,
     1                           ' GIVES ',G13.6)
                        ENDIF
                      ENDIF
                    ENDIF
                  ELSEIF (ICON.EQ.1) THEN
C
C  ARRIVE HERE FOR DR CONVERGENCE TESTING
C  USE RICHARDSON EXTRAPOLATION.
C  FIRST SECTION BELOW DEALS WITH ENERGIES
C
                    IF (IPERT.EQ.0) THEN
                      IF (IPROPS.EQ.8) THEN
                        IRICH=IMGSEL
                      ELSE
                        IRICH=4
                      ENDIF
                      RDELTA=ENEW-EVAL(IBDST,1)
                      RFAC=FAC**IRICH-1.0D0
                      EXTRA=EVAL(IBDST,1)-RDELTA/RFAC
                      SVEXT=(EXTRA-EREFP(IPERT))/EUNIT
                      IF (IPRINT.GE.1) THEN
                        IF (DRL.NE.unset) THEN
                          WRITE(6,8010) ERELP/EUNIT,TRIM(SVUNIT),DRS,DRL
                        ELSE
                          WRITE(6,8010) ERELP/EUNIT,TRIM(SVUNIT),DRS
                        ENDIF
                        WRITE(6,8020) IBDST,IRICH,IPROPS,SVEXT,
     1                                TRIM(SVUNIT)
 8010                   FORMAT(/'  ENERGY CONVERGED: E = ',1PG17.10,1X,
     1                         A,' FOR DR = ',G10.3:,' AND ',G10.3)
 8020                   FORMAT(/'  FOR BOUND STATE',I4,', RICHARDSON',
     1                         ' EXTRAPOLATION BASED ON ERROR',
     2                         ' PROPORTIONAL TO DR**',I1,
     3                         ' FOR IPROPS = ',I2/
     4                         '  GIVES EXTRAPOLATED ENERGY =',46X,
     5                         G17.10,1X,A)
                        CALL PREABS(EXTRA,EREFP(IPERT),EUNIT,SVUNIT)

                      ENDIF
                      IF (ICONV.EQ.1) THEN
                        EXTRAP(IBDST)=EXTRA
                        IF (IPRINT.GE.1) WRITE(6,8030)
 8030                   FORMAT('  THIS IS THE BEST AVAILABLE',
     1                         ' EXTRAPOLATED VALUE FROM THIS SET OF',
     2                         ' CALCULATIONS.')
                      ELSE
                        DIF=EXTRA-EXTRAP(IBDST)
                        IF (IPRINT.GE.1) WRITE(6,8040) DIF
 8040                   FORMAT('  THIS DIFFERS FROM FIRST EXTRAPOLATED',
     1                         ' VALUE BY ',1PG12.4/'  SUGGESTING',
     2                         ' THAT THE FIRST VALUE COULD BE',
     3                         ' UNCONVERGED BY UP TO THIS AMOUNT.')
                      ENDIF
                    ELSE
C
C  ARRIVE HERE IF ICON=1 AND IPERT>0:
C  RICHARDSON EXTRAPOLATION FOR EXPECTATION VALUES
C
                      EXPV=(ENEW-EVAL(IBDST,ICONV+1))/
     1                     (DELTAN*EP2CM)
                      JREF=1+IPERT*(NCONV+1)
                      EXP0=(EVAL(IBDST,JREF)-EVAL(IBDST,1))/
     1                     (DELTAN*EP2CM)
                      IRICH=IMGSEL !4
                      RDELTA=EXPV-EXP0
                      RFAC=FAC**IRICH-1.0D0
                      EXTRA=EXP0-RDELTA/RFAC
C  SCALING FOR ABSOLUTE ENERGY DERIVATIVE WITH RESPECT TO EFV
                      IF (LIPEFV) THEN
                        EXPV =EXPV /EP2CM/EUNIT
                        EXTRA=EXTRA/EP2CM/EUNIT
                      ENDIF
                      IF (IPRINT.GE.1) THEN
                        WRITE(6,8110) IBDST,IRICH,IPROPS
                        IF (DRL.NE.unset) THEN
                          WRITE(6,8120) IPERTN,EXPV,DRS,DRL,EXTRA
                        ELSE
                          WRITE(6,8130) IPERTN,EXPV,DRS,EXTRA
                        ENDIF
                        IF (LIPEFV) WRITE(6,8135) EXTRA-DEDBAT
 8110                   FORMAT(/'  FOR BOUND STATE ',I4,
     1                         ', RICHARDSON EXTRAPOLATION BASED ON',
     2                         ' ERROR PROPORTIONAL TO DR**',I1,
     3                         ' FOR IPROPS = ',I2)
 8120                   FORMAT('  AND <POT(',I2,')> = ',1PG13.6,
     1                         ' FOR DR = ',G10.3,' AND ',G10.3,
     2                         ' GIVES EXTRAPOLATED VALUE = ',G13.6)
 8130                   FORMAT('  AND <POT(',I2,')> = ',1PG13.6,
     1                         ' FOR DR = ',G10.3,
     2                         ' GIVES EXTRAPOLATED VALUE = ',G13.6)
 8135                   FORMAT(50X,'RELATIVE TO THRESHOLD, EXTRAPOLATED',
     1                         ' VALUE = ',G13.6)
                        IF (FACTOR(IPERT).NE.1.0D0) THEN
                          FEXPV=FACTOR(IPERT)*EXTRA
                          WRITE(6,7020) FACTOR(IPERT),FEXPV
                        ENDIF
                      ENDIF
                      IF (ICONV.EQ.1) THEN
                        EXTRAV(IBDST,IPERT)=EXTRA
                        IF (LIPEFV) EXTRAV(IBDST,IPERT)=EXTRA-DEDBAT
                        IF (IPRINT.GE.1) WRITE(6,8030)
                      ELSE
                        DIF=EXTRA-EXTRAV(IBDST,IPERT)
                        IF (IPRINT.GE.1) WRITE(6,8040) DIF
                      ENDIF
                    ENDIF
                  ELSE
C
C  ARRIVE HERE IF ICONV.NE.0 AND ICON.NE.1
C  NO SENSIBLE EXTRAPOLATION IS POSSIBLE:
C  JUST CALCULATE DIFFERENCES
C
                    IF (IPERT.EQ.0) THEN
                      RDELTA=ENEW-EVAL(IBDST,1)
                      IF (IPRINT.GE.1)
     1                  WRITE(6,9010) IBDST,RMNINT,RMXINT,
     2                                (ENEW-EREFP(IPERT))/EUNIT,
     3                                EUNAME,RDELTA/EUNIT,EUNAME
 9010                 FORMAT('  FOR BOUND STATE',I4,', CALCULATION ',
     1                       'WITH RMIN = ',F6.3,' AND RMAX = ',1PG10.3,
     2                       ' GIVES E = ',G17.10,1X,A/'  THIS ',
     3                       'DIFFERS FROM REFERENCE VALUE BY ',
     4                       47X,G17.10,1X,A)
                    ELSE
                      EXPV=(ENEW-EVAL(IBDST,ICONV+1))/
     1                     (DELTAN*EP2CM)
                      JREF=1+IPERT*(NCONV+1)
                      EXP0=(EVAL(IBDST,JREF)-EVAL(IBDST,1))/
     1                     (DELTAN*EP2CM)
C  SCALING FOR ABSOLUTE ENERGY DERIVATIVE WITH RESPECT TO EFV
                      IF (LIPEFV) THEN
                        EXPV=EXPV/EP2CM/EUNIT
                        EXP0=EXP0/EP2CM/EUNIT
                      ENDIF
                      IF (IPRINT.GE.1) THEN
                        WRITE(6,9020) IBDST,RMNINT,RMXINT,IPERTN,
     1                                EXPV
 9020                   FORMAT('  FOR BOUND STATE',I4,', FINITE ',
     1                         'DIFFERENCE CALCULATION WITH RMIN = ',
     2                         F6.3,' AND RMAX = ',F10.3/
     3                         '  GIVES <POT(',I2,')> = ',43X,1PG13.6)
                        IF (LIPEFV) WRITE(6,9025) EXPV-DEDBAT
 9025                   FORMAT('  RELATIVE TO THRESHOLD =',38X,G13.6)
                        IF (FACTOR(IPERT).NE.1.0D0) THEN
                          FEXPV=FACTOR(IPERT)*EXPV
                          WRITE(6,7020) FACTOR(IPERT),FEXPV
                        ENDIF
                        RDELTA=EXPV-EXP0
                        WRITE(6,9030) RDELTA
 9030                   FORMAT('  THIS DIFFERS FROM REFERENCE VALUE ',
     1                         'BY ',25X,1PG13.6)
                        IF (FACTOR(IPERT).NE.1.0D0) THEN
                          FEXPV=FACTOR(IPERT)*RDELTA
                          WRITE(6,7020) FACTOR(IPERT),FEXPV
                        ENDIF
                      ENDIF
                    ENDIF
                  ENDIF
                  IF (IPRINT.GE.1) WRITE(6,9040)
 9040             FORMAT(/2X,59('- '))
C
 5500           CONTINUE
 5200           CONTINUE
C
C  END OF LOOP OVER CONVERGENCE TESTS AND EXTRAPOLATION
C  RESET ALL THE PROPAGATION PARAMETERS BACK TO THEIR STARTING VALUES
C
                DRL=DRLSTR
                DRS=DRSSTR
                RMNINT=RMNSTR
                RMXINT=RMXSTR
 5100       CONTINUE
C
C  END OF PERTURBATION CALCULATIONS. WRITE SUMMARY OF BEST VALUES
C
      IF (NPERT.GT.0 .AND. IBDSUM.GT.0) THEN
        DO IBDST=1,NBDST
          WRITE(IBDSUM,9050) NCHECK(IBDST),
     1                      (EXTRAV(IBDST,IPERT),IPERT=1,NPERT)
 9050     FORMAT(I13,' EXP VALS:',(6G17.6))
        ENDDO
      ENDIF
C
C ============================================================================
C
            IF (ISCRU.GT.0) CLOSE(ISCRU)
C
  300     CONTINUE
          CALL RSTEFV(FIXFLD)
C
C  **********************  END OF LOOP OVER FIELDS  *********************
C
  200   CONTINUE
C
C  ******************  END OF LOOP OVER SYMMETRY BLOCKS  ****************
C
  100 CONTINUE
C
C  ********************  END OF LOOP OVER JTOT  ******************
C
C  END OF RUN BOOKKEEPING
C
      IF (WAVE) CLOSE(IPSI)
C
      CALL GCLOCK(TLAST)
      TOTIME=TLAST-TFIRST
C
      CALL CHKSTR(NUSED)

      IF (IPRINT.GE.1) THEN
        WRITE(6,'(/)')
        WRITE(6,1001)
        WRITE(6,1002)
        CALL PROGVS(PDATE)
        CALL TIMEMS(TOTIME,NUSED,MXSAVE)
        WRITE(6,1001)
      ENDIF

      IF (LASTIN.EQ.0) GOTO 10

  999 CONTINUE
C
C     include statements to pack and send results to master
C
cINOLLS include 'all/pvmdat4.f'
C
      RETURN
      END
